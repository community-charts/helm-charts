name: Release Charts

on:
  push:
    branches: [ main ]
    paths:
      - 'charts/**'

  pull_request:
    branches: [ main ]
    paths:
      - 'charts/**'

env:
  HELM_VERSION: v3.18.3
  HELM_UNITTEST_VERSION: v0.8.2

jobs:
  lint-ah:
    runs-on: ubuntu-latest

    container:
      image: artifacthub/ah:latest
      options: --user root

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Artifact Hub lint
        run: |
          for CHART in charts/*; do
            if [ -d "$CHART" ]; then
              echo "Linting $CHART"
              ah lint -p "$CHART" || exit 1
            fi
          done
          echo "All charts linted successfully."

  lint-test:
    needs: lint-ah

    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - uses: actions/setup-python@v6
        with:
          python-version: 3.12

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Add dependency chart repos
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add community-charts https://community-charts.github.io/helm-charts
          helm repo add minio https://charts.min.io

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct --config ./.github/configs/ct-lint.yaml list-changed)
          charts=$(echo "$changed" | tr '\n' ' ' | xargs)
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "changed_charts=$charts" >> $GITHUB_OUTPUT
          fi

      - name: install helm unittest plugin
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          helm env
          helm plugin install https://github.com/helm-unittest/helm-unittest.git --version ${{ env.HELM_UNITTEST_VERSION }}

      - name: Run chart-testing (lint)
        run: ct lint --debug --config ./.github/configs/ct-lint.yaml --lint-conf ./.github/configs/lintconf.yaml

      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
        if: steps.list-changed.outputs.changed == 'true'

      - name: Run chart-testing (install)
        run: |
          for chart in ${{ steps.list-changed.outputs.changed_charts }}; do
            echo "Testing $chart"
            if [ -f "$chart/.skip-kind-test" ]; then
              echo "Skipping Kind test for $chart due to .skip-kind-test file"
            else
              if [ -f "$chart/values-kind.yaml" ]; then
                echo "Using values-kind.yaml for $chart"
                ct install --config ./.github/configs/ct-lint.yaml --charts "$chart" --helm-extra-set-args "--values $chart/values-kind.yaml" --helm-extra-args "--timeout 600s"
              else
                echo "No values-kind.yaml for $chart"
                ct install --config ./.github/configs/ct-lint.yaml --charts "$chart" --helm-extra-args "--timeout 600s"
              fi
            fi
          done
        if: steps.list-changed.outputs.changed == 'true'

      - name: Post Chart Changes to Pull Request
        if: github.event_name == 'pull_request' && steps.list-changed.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          comment_body="### Chart Release Changes\n\n"
          for chart in ${{ steps.list-changed.outputs.changed_charts }}; do
            comment_body+="#### $chart changes\n\n"
            changes=$(yq eval '.annotations["artifacthub.io/changes"] | select(. != null)' "$chart/Chart.yaml" || echo "Failed to parse $chart/Chart.yaml")
            if [ -n "$changes" ] && [ "$changes" != "Failed to parse $chart/Chart.yaml" ]; then
              formatted_changes=$(echo "$changes" | yq eval -o=json | jq -r '.[] | "- **\(.kind | .[0:1] | ascii_upcase)\(.kind | .[1:])**: \(.description)\n  \(.links // [] | map("  - [\(.name)](\(.url))") | join("\n"))"')
              comment_body+="$formatted_changes\n\n"
            else
              comment_body+="No changes recorded for this release.\n\n"
            fi
          done
          safe_comment_body=$(echo -e "$comment_body" | sed 's/"/\\"/g' | sed "s/'/\\'/g")
          echo -e "$safe_comment_body" > comment.json
          gh pr comment ${{ github.event.pull_request.number }} --body-file comment.json --edit-last --create-if-none || echo "Failed to post or edit comment"

  release:
    needs: lint-test

    runs-on: ubuntu-latest

    permissions:
      contents: write

    if: ${{ github.event_name != 'pull_request' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Prepare GPG environment for Helm
        id: import-gpg
        run: |
          GNUPG_DIR="$(mktemp --directory --tmpdir=${{ runner.temp }})"

          # Import GPG passphrase
          echo '${{ secrets.GPG_PASSPHRASE }}' > "${GNUPG_DIR}/passphrase"
          echo "passphrase-file=${GNUPG_DIR}/passphrase" >> "${GITHUB_OUTPUT}"

          # Import GPG signing key
          echo '${{ secrets.GPG_KEYRING_BASE64 }}' | base64 -d | gpg --dearmor > "${GNUPG_DIR}/secring.gpg"
          echo "keyring=${GNUPG_DIR}/secring.gpg" >> "${GITHUB_OUTPUT}"

      - name: Add dependency chart repos
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add community-charts https://community-charts.github.io/helm-charts
          helm repo add minio https://charts.min.io

      - name: Detect Changed Charts
        id: detect-changed
        run: |
          changed=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }} | grep '^charts/' | cut -d/ -f1-2 | sort -u)
          echo "Changed charts: '$changed'"
          charts=$(echo "$changed" | tr '\n' ' ' | xargs)
          if [[ -n "$changed" ]]; then
            echo "changed_charts=$charts" >> $GITHUB_OUTPUT
          fi

      - name: Extract Changes from Chart.yaml
        if: steps.detect-changed.outputs.changed_charts != ''
        run: |
          for chart in ${{ steps.detect-changed.outputs.changed_charts }}; do
            echo "# Changelog" > $chart/RELEASE-NOTES.md
            echo "" >> $chart/RELEASE-NOTES.md
            changes=$(yq eval '.annotations["artifacthub.io/changes"] | select(. != null)' $chart/Chart.yaml)
            if [ -n "$changes" ]; then
              echo "$changes" | yq eval -o=json | jq -r '.[] | "- **\(.kind | .[0:1] | ascii_upcase)\(.kind | .[1:])**: \(.description)\n  \(.links // [] | map("  - [\(.name)](\(.url))") | join("\n"))"' >> $chart/RELEASE-NOTES.md
            else
              echo "No changes recorded for this release." >> $chart/RELEASE-NOTES.md
            fi
          done

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          config: ./.github/configs/cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_KEY: "${{ secrets.CR_KEY }}"
          CR_KEYRING: ${{ steps.import-gpg.outputs.keyring }}
          CR_PASSPHRASE_FILE: ${{ steps.import-gpg.outputs.passphrase-file }}
          CR_SIGN: "true"
          CR_SKIP_EXISTING: "true"
