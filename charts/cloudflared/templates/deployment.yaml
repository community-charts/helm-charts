apiVersion: apps/v1
{{- if .Values.replica.allNodes }}
kind: DaemonSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: {{ include "cloudflared.fullname" . }}
  labels:
    {{- include "cloudflared.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "cloudflared.selectorLabels" . | nindent 6 }}
  {{- if .Values.replica.allNodes }}
  {{- with .Values.updateStrategy }}
  updateStrategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- else }}
  replicas: {{ .Values.replica.count | int }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cloudflared.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cloudflared.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | int }}
      containers:
        - name: cloudflared
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args:
            - tunnel
            - --config
            - /etc/cloudflared/config/config.yaml
            - run
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: active-con-stat
              containerPort: 2000
              protocol: TCP
        {{- if and .Values.tunnelSecrets.existingPemFileSecret.name (ne .Values.tunnelSecrets.existingPemFileSecret.key "cert.pem") }}
          env:
            - name: TUNNEL_ORIGIN_CERT
              value: {{ printf "/etc/cloudflared/creds/%s" .Values.tunnelSecrets.existingPemFileSecret.key }}
        {{- end }}
          livenessProbe:
            httpGet:
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: config
              mountPath: /etc/cloudflared/config
              readOnly: true
            - name: creds
              mountPath: /etc/cloudflared/creds
              readOnly: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: creds
          projected:
            sources:
            {{- if or (eq .Values.tunnelSecrets.existingPemFileSecret.name "") (eq .Values.tunnelSecrets.existingConfigJsonFileSecret.name "") }}
              - secret:
                  name: tunnel-credentials
            {{- end }}
            {{- if .Values.tunnelSecrets.existingPemFileSecret.name }}
              - secret:
                  name: {{ .Values.tunnelSecrets.existingPemFileSecret.name }}
            {{- end }}
            {{- if .Values.tunnelSecrets.existingConfigJsonFileSecret.name }}
              - secret:
                  name: {{ .Values.tunnelSecrets.existingConfigJsonFileSecret.name }}
            {{- end }}
        - name: config
          configMap:
            name: cloudflared
            items:
              - key: config.yaml
                path: config.yaml
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
