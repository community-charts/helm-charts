{{ template "chart.header" . }}

![cloudflared](https://raw.githubusercontent.com/cloudflare/color/refs/heads/master/static/thinking/logo.png)

{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

## Official Documentation

For detailed usage instructions, configuration options, and additional information about the `{{ template "chart.name" . }}` Helm chart, refer to the [official documentation](https://community-charts.github.io/docs/charts/{{ template "chart.name" . }}/usage).

## Get Helm Repository Info

```console
helm repo add community-charts https://community-charts.github.io/helm-charts
helm repo update
```

_See [`helm repo`](https://helm.sh/docs/helm/helm_repo/) for command documentation._

## Installing the Chart

> **Tip**: The creation of a Cloudflare account and the setup of a Cloudflared tunnel are prerequisites for using this chart. These steps are not included as part of the chart installation process and must be completed beforehand.

### Prerequisites

1. **Create a Cloudflare Account**
   If you do not yet have a Cloudflare account, please refer to [Cloudflare's official documentation](https://developers.cloudflare.com/fundamentals/setup/account/create-account/) to create one.

2. **Set Up a Cloudflared Tunnel**
   If you already have a Cloudflare account and have added your domain to it, follow the first three steps in [this guide](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/create-local-tunnel/) to create a Cloudflared tunnel using the CLI.

3. **Store Tunnel Files**
   After creating your Cloudflared tunnel via CLI, ensure the following files are stored in the `./cloudflare` directory under your home directory:
   - Your tunnel credentials JSON file.
   - Your tunnel certificate PEM file.

### Encoding and Configuring Tunnel Files

To configure the chart, encode the required tunnel files using the following commands and set their values accordingly:

1. **Encode the Tunnel Credentials JSON File**
   Use the following command to obtain the base64-encoded version of your tunnel credentials JSON file and set it in the `tunnelSecrets.base64EncodedConfigJsonFile` configuration:

   ```console
   base64 -b 0 -i ~/.cloudflared/*.json
   ```

   If the above command did not work due to OS differences, you can simply use the command below.

   ```console
   cat ~/.cloudflared/*.json | base64
   ```

2. **Encode the Tunnel Certificate PEM File**
   Use the following command to obtain the base64-encoded version of your tunnel certificate PEM file and set it in the `tunnelSecrets.base64EncodedPemFile` configuration:

   ```console
   base64 -b 0 -i ~/.cloudflared/cert.pem
   ```

   If the above command did not work due to OS differences, you can simply use the command below.

   ```console
   cat ~/.cloudflared/cert.pem | base64
   ```

3. **Set the Tunnel Name**
   Pass the name of your tunnel, as created earlier via the Cloudflared CLI, to the `tunnelConfig.name` configuration.

### Setting Credentials to Kubernetes Secrets and working with Existing Secrets

```console
cp ~/.cloudflared/*.json ./credentials.json
kubectl create secret generic config-json-file-secret -n cloudflare --from-file=credentials.json

kubectl create secret generic cert-pem-file-secret -n cloudflare --from-file=~/.cloudflared/cert.pem
```

And use the following configuration rather than base64 versions.

```yaml
tunnelSecrets:
  existingConfigJsonFileSecret:
    name: config-json-file-secret
  existingPemFileSecret:
    name: cert-pem-file-secret
```

### Configuring Ingress

The default ingress configuration is shown below. Replace the placeholder values with your domain and server settings. It is recommended to use a separate `values.yaml` file to manage this configuration.

```yaml
ingress:
  - hostname: example.com # or "*.example.com" (ensure a CNAME record for "*" is defined in your DNS)
    service: http://traefik.kube-system.svc.cluster.local:80

  - service: http_status:404
```

### Installing the Chart

Use the following `helm` command to install or upgrade the chart. Replace the placeholders with your specific values:

```console
helm upgrade --install -f values.yaml [RELEASE_NAME] community-charts/{{ template "chart.name" . }} -n [NAMESPACE] --create-namespace \
  --set=tunnelSecrets.base64EncodedConfigJsonFile=$(base64 -b 0 -i ~/.cloudflared/*.json) \
  --set=tunnelSecrets.base64EncodedPemFile=$(base64 -b 0 -i ~/.cloudflared/cert.pem) \
  --set=tunnelConfig.name=[TUNNEL_NAME]
```

_See [configuration](#configuration) below._

_See [helm install](https://helm.sh/docs/helm/helm_install/) for command documentation._

> **Tip**: Search all available chart versions using `helm search repo community-charts -l`. Please don't forget to run `helm repo update` before the command.

## Upgrading

This section outlines major updates and breaking changes for each version of the Helm Chart to help you transition smoothly between releases.

---

### Version-Specific Upgrade Notes

#### Upgrading to 2.x.x

##### Breaking Changes

- Your Kubernetes server must be at or later than version v1.21.

{{ template "chart.requirementsSection" . }}

## Uninstall Helm Chart

```console
helm uninstall [RELEASE_NAME]
```

This removes all the Kubernetes components associated with the chart and deletes the release.

_See [helm uninstall](https://helm.sh/docs/helm/helm_uninstall/) for command documentation._

## Upgrading Chart

```console
helm upgrade [RELEASE_NAME] community-charts/{{ template "chart.name" . }}
```

{{ template "chart.valuesSection" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.sourcesSection" . }}

## Chart Development

Please install unittest helm plugin with `helm plugin install https://github.com/helm-unittest/helm-unittest.git` command and use following command to run helm unit tests.

```console
helm unittest --strict --file 'unittests/**/*.yaml' charts/{{ template "chart.name" . }}
```

{{ template "chart.maintainersSection" . }}
