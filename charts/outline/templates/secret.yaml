{{- if and (not .Values.postgresql.enabled) (not .Values.externalPostgresql.existingSecret) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "outline.postgresql.fullname" . }}
  labels:
    app: {{ include "outline.name" . }}
    chart: {{ include "outline.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
data:
  postgres-password: {{ required "PostgreSQL password is required" .Values.externalPostgresql.password | b64enc | quote }}
{{- end }}
{{- if and (not .Values.redis.enabled) (not .Values.externalRedis.existingSecret) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "outline.redis.fullname" . }}
  labels:
    app: {{ include "outline.name" . }}
    chart: {{ include "outline.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
data:
  redis-username: {{ default "default" .Values.externalRedis.username | b64enc | quote }}
  redis-password: {{ required "Redis password is required" .Values.externalRedis.password | b64enc | quote }}
{{- end }}
{{- $secretName := printf "%s-auto-generated-secret" (include "outline.fullname" .) }}
{{- $secretKey := ternary .Values.secretKey (include "outline.generateRandomHex" 64) (ne .Values.secretKey "") }}
{{- $utilsSecret := ternary .Values.utilsSecret (include "outline.generateRandomHex" 64) (ne .Values.utilsSecret "") }}
{{- if not (lookup "v1" "Secret" .Release.Namespace $secretName) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "outline.name" . }}
    chart: {{ include "outline.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
data:
  secret-key: {{ $secretKey | b64enc }}
  utils-secret: {{ $utilsSecret | b64enc }}
{{- end }}
{{- if and (eq .Values.fileStorage.mode "s3") (not .Values.fileStorage.s3.existingSecret) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "outline.fullname" . }}-s3-secret
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "outline.name" . }}
    chart: {{ include "outline.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
data:
{{- if not .Values.minio.enabled }}
  {{ .Values.fileStorage.s3.accessKeyIdSecretKey }}: {{ .Values.fileStorage.s3.accessKeyId | b64enc | quote }}
  {{ .Values.fileStorage.s3.secretAccessKeySecretKey }}: {{ .Values.fileStorage.s3.secretAccessKey | b64enc | quote }}
{{- else if and .Values.minio.enabled (not (eq (len .Values.minio.users) 0)) }}
  {{- with (first .Values.minio.users) }}
  {{ $.Values.fileStorage.s3.accessKeyIdSecretKey }}: {{ .accessKey | b64enc }}
  {{ $.Values.fileStorage.s3.secretAccessKeySecretKey }}: {{ .secretKey | b64enc }}
  {{- end }}
{{- end }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "outline.fullname" . }}-auth-secret
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "outline.name" . }}
    chart: {{ include "outline.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
data:
{{- if .Values.auth.slack.enabled }}
  SLACK_CLIENT_ID: {{ .Values.auth.slack.clientId | b64enc | quote }}
  {{- if not .Values.auth.slack.existingSecret.name }}
  SLACK_CLIENT_SECRET: {{ .Values.auth.slack.clientSecret | b64enc | quote }}
  {{- end }}
{{- end }}
{{- if .Values.auth.google.enabled  }}
  GOOGLE_CLIENT_ID: {{ .Values.auth.google.clientId | b64enc | quote }}
  {{- if not .Values.auth.google.existingSecret.name }}
  GOOGLE_CLIENT_SECRET: {{ .Values.auth.google.clientSecret | b64enc | quote }}
  {{- end }}
{{- end }}
{{- if .Values.auth.azure.enabled }}
  AZURE_CLIENT_ID: {{ .Values.auth.azure.clientId | b64enc | quote }}
  {{- if not .Values.auth.azure.existingSecret.name }}
  AZURE_CLIENT_SECRET: {{ .Values.auth.azure.clientSecret | b64enc | quote }}
  {{- end }}
  {{- if .Values.auth.azure.resourceAppId }}
  AZURE_RESOURCE_APP_ID: {{ .Values.auth.azure.resourceAppId | b64enc | quote }}
  {{- end }}
  {{- if .Values.auth.azure.tenantId }}
  AZURE_TENANT_ID: {{ .Values.auth.azure.tenantId | b64enc | quote }}
  {{- end }}
{{- end }}
{{- if .Values.auth.github.enabled }}
  GITHUB_CLIENT_ID: {{ .Values.auth.github.clientId | b64enc | quote }}
  {{- if not .Values.auth.github.existingSecret.name }}
  GITHUB_CLIENT_SECRET: {{ .Values.auth.github.clientSecret | b64enc | quote }}
  GITHUB_APP_PRIVATE_KEY: {{ .Values.auth.github.appPrivateKey | b64enc | quote }}
  {{- end }}
  GITHUB_APP_NAME: {{ .Values.auth.github.appName | b64enc | quote }}
  GITHUB_APP_ID: {{ .Values.auth.github.appId | b64enc | quote }}
{{- end }}
{{- if .Values.auth.discord.enabled }}
  DISCORD_CLIENT_ID: {{ .Values.auth.discord.clientId | b64enc | quote }}
  {{- if not .Values.auth.discord.existingSecret.name }}
  DISCORD_CLIENT_SECRET: {{ .Values.auth.discord.clientSecret | b64enc | quote }}
  {{- end }}
  DISCORD_SERVER_ID: {{ .Values.auth.discord.serverId | b64enc | quote }}
  DISCORD_SERVER_ROLES: {{ .Values.auth.discord.serverRoles | join "," | b64enc | quote }}
{{- end }}
{{- if .Values.auth.gitea.enabled }}
  OIDC_CLIENT_ID: {{ .Values.auth.gitea.clientId | b64enc | quote }}
  {{- if not .Values.auth.gitea.existingSecret.name }}
  OIDC_CLIENT_SECRET: {{ .Values.auth.gitea.clientSecret | b64enc | quote }}
  {{- end }}
  OIDC_AUTH_URI: {{ printf "https://%s/login/oauth/authorize" (.Values.auth.gitea.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_TOKEN_URI: {{ printf "https://%s/login/oauth/access_token" (.Values.auth.gitea.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_USERINFO_URI: {{ printf "https://%s/login/oauth/userinfo" (.Values.auth.gitea.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_USERNAME_CLAIM: {{ .Values.auth.gitea.usernameClaim | b64enc | quote }}
  OIDC_DISPLAY_NAME: {{ .Values.auth.gitea.displayName | b64enc | quote }}
  OIDC_SCOPES: {{ .Values.auth.gitea.scopes | join " " | b64enc | quote }}
{{- else if .Values.auth.gitlab.enabled }}
  OIDC_CLIENT_ID: {{ .Values.auth.gitlab.clientId | b64enc | quote }}
  {{- if not .Values.auth.gitlab.existingSecret.name }}
  OIDC_CLIENT_SECRET: {{ .Values.auth.gitlab.clientSecret | b64enc | quote }}
  {{- end }}
  OIDC_AUTH_URI: {{ printf "https://%s/oauth/authorize" (.Values.auth.gitlab.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_TOKEN_URI: {{ printf "https://%s/oauth/token" (.Values.auth.gitlab.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_USERINFO_URI: {{ printf "https://%s/oauth/userinfo" (.Values.auth.gitlab.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_USERNAME_CLAIM: {{ .Values.auth.gitlab.usernameClaim | b64enc | quote }}
  OIDC_DISPLAY_NAME: {{ .Values.auth.gitlab.displayName | b64enc | quote }}
  OIDC_SCOPES: {{ .Values.auth.gitlab.scopes | join " " | b64enc | quote }}
{{- else if .Values.auth.auth0.enabled }}
  OIDC_CLIENT_ID: {{ .Values.auth.auth0.clientId | b64enc | quote }}
  {{- if not .Values.auth.auth0.existingSecret.name }}
  OIDC_CLIENT_SECRET: {{ .Values.auth.auth0.clientSecret | b64enc | quote }}
  {{- end }}
  OIDC_AUTH_URI: {{ printf "https://%s/authorize" (.Values.auth.auth0.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_TOKEN_URI: {{ printf "https://%s/oauth/token" (.Values.auth.auth0.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_USERINFO_URI: {{ printf "https://%s/userinfo" (.Values.auth.auth0.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") | b64enc | quote }}
  OIDC_USERNAME_CLAIM: {{ .Values.auth.auth0.usernameClaim | b64enc | quote }}
  OIDC_DISPLAY_NAME: {{ .Values.auth.auth0.displayName | b64enc | quote }}
  OIDC_SCOPES: {{ .Values.auth.auth0.scopes | join " " | b64enc | quote }}
{{- else if .Values.auth.keycloak.enabled }}
  OIDC_CLIENT_ID: {{ .Values.auth.keycloak.clientId | b64enc | quote }}
  {{- if not .Values.auth.keycloak.existingSecret.name }}
  OIDC_CLIENT_SECRET: {{ .Values.auth.keycloak.clientSecret | b64enc | quote }}
  {{- end }}
  OIDC_AUTH_URI: {{ printf "https://%s/realms/%s/protocol/openid-connect/auth" (.Values.auth.keycloak.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") .Values.auth.keycloak.realmName | b64enc | quote }}
  OIDC_TOKEN_URI: {{ printf "https://%s/realms/%s/protocol/openid-connect/token" (.Values.auth.keycloak.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") .Values.auth.keycloak.realmName | b64enc | quote }}
  OIDC_USERINFO_URI: {{ printf "https://%s/realms/%s/protocol/openid-connect/userinfo" (.Values.auth.keycloak.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") .Values.auth.keycloak.realmName | b64enc | quote }}
  OIDC_LOGOUT_URI: {{ printf "https://%s/realms/%s/protocol/openid-connect/logout" (.Values.auth.keycloak.baseUrl | trimPrefix "https://" | trimPrefix "http://" | trimSuffix "/") .Values.auth.keycloak.realmName | b64enc | quote }}
  OIDC_USERNAME_CLAIM: {{ .Values.auth.keycloak.usernameClaim | b64enc | quote }}
  OIDC_DISPLAY_NAME: {{ .Values.auth.keycloak.displayName | b64enc | quote }}
  OIDC_SCOPES: {{ .Values.auth.keycloak.scopes | join " " | b64enc | quote }}
{{- else if .Values.auth.oidc.enabled }}
  OIDC_CLIENT_ID: {{ .Values.auth.oidc.clientId | b64enc | quote }}
  {{- if not .Values.auth.oidc.existingSecret.name }}
  OIDC_CLIENT_SECRET: {{ .Values.auth.oidc.clientSecret | b64enc | quote }}
  {{- end }}
  OIDC_AUTH_URI: {{ .Values.auth.oidc.authUri | b64enc | quote }}
  OIDC_TOKEN_URI: {{ .Values.auth.oidc.tokenUri | b64enc | quote }}
  OIDC_USERINFO_URI: {{ .Values.auth.oidc.userInfoUri | b64enc | quote }}
  OIDC_LOGOUT_URI: {{ .Values.auth.oidc.logoutUri | b64enc | quote }}
  OIDC_USERNAME_CLAIM: {{ .Values.auth.oidc.usernameClaim | b64enc | quote }}
  OIDC_DISPLAY_NAME: {{ .Values.auth.oidc.displayName | b64enc | quote }}
  OIDC_SCOPES: {{ .Values.auth.oidc.scopes | join " " | b64enc | quote }}
{{- end }}
{{- if .Values.auth.saml.enabled }}
  SAML_SSO_ENDPOINT: {{ .Values.auth.saml.ssoEndpoint | b64enc | quote }}
  {{- if not .Values.auth.saml.existingSecret.name }}
  SAML_CERT: {{ .Values.auth.saml.cert | b64enc | quote }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "outline.fullname" . }}-smtp-secret
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "outline.name" . }}
    chart: {{ include "outline.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
data:
  SMTP_HOST: {{ .Values.smtp.host | b64enc | quote }}
  SMTP_PORT: {{ printf "%d" (.Values.smtp.port | int) | b64enc | quote }}
  {{- if not .Values.smtp.existingSecret.name }}
  SMTP_USERNAME: {{ .Values.smtp.username | b64enc | quote }}
  SMTP_PASSWORD: {{ .Values.smtp.password | b64enc | quote }}
  {{- end }}
  SMTP_FROM_EMAIL: {{ .Values.smtp.fromEmail | b64enc | quote }}
  SMTP_REPLY_EMAIL: {{ .Values.smtp.replyEmail | b64enc | quote }}
  SMTP_TLS_CIPHERS: {{ .Values.smtp.tlsCiphers | b64enc | quote }}
  SMTP_SECURE: {{ printf "%t" .Values.smtp.secure | b64enc | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "outline.fullname" . }}-integrations-secret
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "outline.name" . }}
    chart: {{ include "outline.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
data:
{{- if .Values.integrations.iframely.enabled }}
  IFRAMELY_URL: {{ .Values.integrations.iframely.url | b64enc | quote }}
  {{- if not .Values.integrations.iframely.existingSecret.name }}
  IFRAMELY_API_KEY: {{ .Values.integrations.iframely.apiKey | b64enc | quote }}
  {{- end }}
{{- end }}
{{- if .Values.integrations.openAI.enabled }}
  OPENAI_URL: {{ .Values.integrations.openAI.url | b64enc | quote }}
  {{- if not .Values.integrations.openAI.existingSecret.name }}
  OPENAI_API_KEY: {{ .Values.integrations.openAI.apiKey | b64enc | quote }}
  {{- end }}
  DATABASE_URL_VECTOR: {{ .Values.integrations.openAI.vectorDatabaseUrl | b64enc | quote }}
{{- end }}
{{- if .Values.integrations.pdfExport.enabled }}
  GOTENBERG_URL: {{ .Values.integrations.pdfExport.gotenbergUrl | b64enc | quote }}
{{- end }}
{{- if .Values.integrations.sentry.enabled }}
  SENTRY_DSN: {{ .Values.integrations.sentry.dsn | b64enc | quote }}
  SENTRY_TUNNEL: {{ .Values.integrations.sentry.tunnel | b64enc | quote }}
{{- end }}
{{- if .Values.integrations.slack.enabled }}
  {{- if not .Values.integrations.slack.existingSecret.name }}
  SLACK_VERIFICATION_TOKEN: {{ .Values.integrations.slack.verificationToken | b64enc | quote }}
  {{- end }}
  SLACK_APP_ID: {{ .Values.integrations.slack.appId | b64enc | quote }}
  SLACK_MESSAGE_ACTIONS: {{ printf "%t" .Values.integrations.slack.messageActions | b64enc | quote }}
{{- end }}
{{- if .Values.integrations.dropbox.enabled }}
  {{- if not .Values.integrations.dropbox.existingSecret.name }}
  DROPBOX_APP_KEY: {{ .Values.integrations.dropbox.appKey | b64enc | quote }}
  {{- end }}
{{- end }}
{{- if .Values.integrations.linear.enabled }}
  LINEAR_CLIENT_ID: {{ .Values.integrations.linear.clientId | b64enc | quote }}
  {{- if not .Values.integrations.linear.existingSecret.name }}
  LINEAR_CLIENT_SECRET: {{ .Values.integrations.linear.clientSecret | b64enc | quote }}
  {{- end }}
{{- end }}
{{- if .Values.integrations.notion.enabled }}
  NOTION_CLIENT_ID: {{ .Values.integrations.notion.clientId | b64enc | quote }}
  {{- if not .Values.integrations.notion.existingSecret.name }}
  NOTION_CLIENT_SECRET: {{ .Values.integrations.notion.clientSecret | b64enc | quote }}
  {{- end }}
{{- end }}
