suite: test deployment

templates:
  - deployment.yaml

set:
  externalPostgresql:
    host: fake-postgresql-service
  externalRedis:
    host: fake-redis-service

release:
  name: outline
  namespace: outline

chart:
  version: 1.0.0
  appVersion: 1.0.0

tests:
  - it: should set replica count when replicaCount is set
    set:
      replicaCount: 2
    asserts:
      - equal:
          path: spec.replicas
          value: 2

  - it: should be custom service account when we do not create it
    set:
      serviceAccount:
        create: false
        name: customsa
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: customsa

  - it: should set strategy to Recreate when strategy.type is Recreate
    set:
      strategy:
        type: Recreate
    asserts:
      - equal:
          path: spec.strategy.type
          value: Recreate

  - it: should set strategy to RollingUpdate when strategy.type is RollingUpdate
    set:
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
          maxSurge: 1
    asserts:
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 1
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 1

  - it: should set pod annotations when podAnnotations are set
    set:
      podAnnotations:
        test: test
    asserts:
      - equal:
          path: spec.template.metadata.annotations.test
          value: test

  - it: should set image pull secrets when imagePullSecrets are set
    set:
      imagePullSecrets:
        - name: fake-image-pull-secret
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: fake-image-pull-secret

  - it: should set pod security context when podSecurityContext is set
    set:
      podSecurityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
    asserts:
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true

  - it: should set container security context when securityContext is set
    set:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].securityContext.runAsGroup
          value: 1000
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].securityContext.runAsNonRoot
          value: true

  - it: should use image repository and tag from image when they set
    set:
      image:
        repository: fake-image-repository/fake-image
        tag: fake-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].image
          value: fake-image-repository/fake-image:fake-tag

  - it: should use default image and chart app version as image tag when tag is not set
    set:
      image:
        tag: ""
    release:
      name: outline
      namespace: outline
    chart:
      version: 1.0.0
      appVersion: 0.81.0
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].image
          value: outlinewiki/outline:0.81.0

  - it: should set image pull policy when imagePullPolicy is set
    set:
      image.pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].imagePullPolicy
          value: Always

  - it: should set ports when service.port is set
    set:
      service:
        port: 8080
        name: fake-port
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].ports[0].name
          value: fake-port
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].ports[0].containerPort
          value: 8080
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].ports[0].protocol
          value: TCP

  - it: should set liveness probe when livenessProbe is set
    set:
      livenessProbe:
        httpGet:
          path: /health
          port: http
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].livenessProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].livenessProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].livenessProbe.initialDelaySeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].livenessProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].livenessProbe.timeoutSeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].livenessProbe.failureThreshold
          value: 3
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].livenessProbe.successThreshold
          value: 1

  - it: should set readiness probe when readinessProbe is set
    set:
      readinessProbe:
        httpGet:
          path: /health
          port: http
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].readinessProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].readinessProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].readinessProbe.initialDelaySeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].readinessProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].readinessProbe.timeoutSeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].readinessProbe.failureThreshold
          value: 3
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].readinessProbe.successThreshold
          value: 1

  - it: should set resources when resources are set
    set:
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
        limits:
          cpu: 200m
          memory: 200Mi
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].resources.requests.cpu
          value: 100m
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].resources.requests.memory
          value: 100Mi
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].resources.limits.cpu
          value: 200m
      - equal:
          path: spec.template.spec.containers[?(@.name == "outline")].resources.limits.memory
          value: 200Mi

  - it: should set required environment variables
    set:
      service:
        port: 5000
      defaultLanguage: de_DE
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: NODE_ENV
            value: production
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret-key
                name: outline-auto-generated-secret
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: UTILS_SECRET
            valueFrom:
              secretKeyRef:
                key: utils-secret
                name: outline-auto-generated-secret
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PORT
            value: "5000"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: DEFAULT_LANGUAGE
            value: de_DE
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: URL
            value: http://outline:5000
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: RATE_LIMITER_ENABLED
            value: "false"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: ENABLE_UPDATES
            value: "false"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: TELEMETRY
            value: "false"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FORCE_HTTPS
            value: "true"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: WEB_CONCURRENCY
            value: "1"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: LOG_LEVEL
            value: "info"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGUSER
            value: postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: outline-postgresql
                optional: true
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGPORT
            value: "5432"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGHOST
            value: fake-postgresql-service
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGDATABASE
            value: outline
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: DATABASE_CONNECTION_POOL_MIN
            value: ""
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: DATABASE_CONNECTION_POOL_MAX
            value: "20"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGSSLMODE
            value: disable
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: REDIS_USERNAME
            valueFrom:
              secretKeyRef:
                key: redis-username
                name: outline-redis
                optional: true
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: outline-redis
                optional: true
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: REDIS_HOST
            value: fake-redis-service
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: REDIS_PORT
            value: "6379"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: DATABASE_URL
            value: "postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST):$(PGPORT)/$(PGDATABASE)"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FILE_STORAGE
            value: "local"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FILE_STORAGE_UPLOAD_MAX_SIZE
            value: "262144000"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FILE_STORAGE_IMPORT_MAX_SIZE
            value: ""
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FILE_STORAGE_WORKSPACE_IMPORT_MAX_SIZE
            value: ""
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FILE_STORAGE_LOCAL_ROOT_DIR
            value: "/var/lib/outline/data"

  - it: should set secret key from external secret when secretKeyExternalSecret is set
    set:
      secretKeyExternalSecret:
        name: fake-secret-key-external-secret
        key: fake-secret-key
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: fake-secret-key
                name: fake-secret-key-external-secret

  - it: should set utils secret from external secret when utilsSecretExternalSecret is set
    set:
      utilsSecretExternalSecret:
        name: fake-utils-secret-external-secret
        key: fake-utils-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: UTILS_SECRET
            valueFrom:
              secretKeyRef:
                key: fake-utils-secret
                name: fake-utils-secret-external-secret

  - it: should set http ingress url when ingress is enabled and tls is not set
    set:
      ingress:
        enabled: true
        hosts:
          - host: fake-host.local
            paths:
              - path: /
                pathType: ImplementationSpecific
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: URL
            value: http://fake-host.local

  - it: should set https ingress url when ingress is enabled and tls is set
    set:
      ingress:
        enabled: true
        hosts:
          - host: fake-host.local
            paths:
              - path: /
                pathType: ImplementationSpecific
        tls:
          - hosts:
              - fake-host.local
            secretName: fake-tls-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: URL
            value: https://fake-host.local

  - it: should set url when url is set
    set:
      url: https://my.company.com
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: URL
            value: https://my.company.com

  - it: should set rate limiter when rateLimiter is enabled
    set:
      rateLimiter:
        enabled: true
        limit: 100
        window: 60
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: RATE_LIMITER_ENABLED
            value: "true"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: RATE_LIMITER_REQUESTS
            value: "100"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: RATE_LIMITER_DURATION_WINDOW
            value: "60"

  - it: should set not force https when web.forceHttps is false
    set:
      web:
        forceHttps: false
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FORCE_HTTPS
            value: "false"

  - it: should skip ssl verification when web.skipSSLVerification is true
    set:
      web:
        skipSSLVerification: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: NODE_TLS_REJECT_UNAUTHORIZED
            value: "0"

  - it: should set comma separated debug logs when logging.extraDebug is set
    set:
      logging:
        extraDebug:
          - lifecycle
          - http
          - editor
          - router
          - collaboration
          - misc
          - store
          - plugins
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: DEBUG
            value: "lifecycle,http,editor,router,collaboration,misc,store,plugins"

  - it: should use password key when postgresql.auth.username is set and when postgresql.enabled
    set:
      postgresql:
        enabled: true
        auth:
          username: fake-username
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: outline-postgresql
                optional: true

  - it: should set postgresql password from existing secret when postgresql.enabled is false and externalPostgresql.existingSecret is set and externalPostgresql.passwordSecretKey is set
    set:
      postgresql:
        enabled: false
      externalPostgresql:
        existingSecret: fake-existing-secret
        passwordSecretKey: fale-password-key
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: fale-password-key
                name: fake-existing-secret
                optional: true

  - it: should set postgresql port from external configuration when postgresql.enabled is false and externalPostgresql.port is set
    set:
      postgresql:
        enabled: false
      externalPostgresql:
        port: 20185
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGPORT
            value: "20185"

  - it: should set postgresql host by release name when postgresql.enabled is true
    set:
      postgresql:
        enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGHOST
            value: outline-postgresql

  - it: should set postgresql port from bitnami's configuration when postgresql.enabled is true and postgresql.primary.service.ports.postgresql is set
    set:
      postgresql:
        enabled: true
        primary:
          service:
            ports:
              postgresql: 20185
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGPORT
            value: "20185"

  - it: should set postgresql database by postgresql.auth.database when postgresql.enabled is true
    set:
      postgresql:
        enabled: true
        auth:
          database: fake-database
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: PGDATABASE
            value: fake-database

  - it: should set redis username from existing secret when redis is not enabled and externalRedis.existingSecret is set
    set:
      redis:
        enabled: false
      externalRedis:
        existingSecret: fake-existing-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: REDIS_USERNAME
            valueFrom:
              secretKeyRef:
                key: redis-username
                name: fake-existing-secret
                optional: true

  - it: should set redis username default when redis is enabled and externalRedis.existingSecret is not set
    set:
      redis:
        enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: REDIS_USERNAME
            value: "default"

  - it: should set redis port from bitnami's config when redis.enabled is true and redis.master.service.ports.redis is set
    set:
      redis:
        enabled: true
        master:
          service:
            ports:
              redis: 22000
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: REDIS_PORT
            value: "22000"

  - it: should set file storage directory and volume for it when fileStorage.mode is local and persistence is enabled
    set:
      fileStorage:
        mode: local
        local:
          rootDir: /any/path
          persistence:
            enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FILE_STORAGE_LOCAL_ROOT_DIR
            value: "/any/path"
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: outline-data

  - it: should set file storage directory and volume for it when fileStorage.mode is local and persistence is enabled and existingClaim is set
    set:
      fileStorage:
        mode: local
        local:
          rootDir: /another/path
          persistence:
            enabled: true
            existingClaim: fake-existing-claim
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: FILE_STORAGE_LOCAL_ROOT_DIR
            value: "/another/path"
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: fake-existing-claim

  - it: should set aws access key id from s3 object when fileStorage.mode is s3 and minio is not enabled
    set:
      minio:
        enabled: false
      fileStorage:
        mode: s3
        s3:
          accessKeyId: fake-access-key-id
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: access-key-id
                name: outline-s3-secret

  - it: should set aws access key from rootUser key when file storage mode is s3 and minio is enabled and users are not set
    set:
      fileStorage:
        mode: s3
      minio:
        enabled: true
        users: []
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: rootUser
                name: outline-minio

  - it: should set aws access key from existing secret when file storage mode is s3 and minio is not enabled
    set:
      fileStorage:
        mode: s3
        s3:
          existingSecret: fake-existing-secret
      minio:
        enabled: false
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: access-key-id
                name: fake-existing-secret

  - it: should set aws secret access key from s3 object when fileStorage.mode is s3 and minio is not enabled
    set:
      minio:
        enabled: false
      fileStorage:
        mode: s3
        s3:
          secretAccessKey: fake-secret-access-key
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secret-access-key
                name: outline-s3-secret

  - it: should set aws secret access key from rootPassword key when file storage mode is s3 and minio is enabled and users are not set
    set:
      fileStorage:
        mode: s3
      minio:
        enabled: true
        users: []
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: rootPassword
                name: outline-minio

  - it: should set aws secret access key from existing secret when file storage mode is s3 and minio is not enabled
    set:
      fileStorage:
        mode: s3
        s3:
          existingSecret: fake-existing-secret
      minio:
        enabled: false
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secret-access-key
                name: fake-existing-secret

  - it: should set bucket name from s3 object when file storage mode is s3 and minio is not enabled
    set:
      fileStorage:
        mode: s3
        s3:
          bucket: fake-bucket
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_S3_UPLOAD_BUCKET_NAME
            value: fake-bucket

  - it: should set bucket name from minio bucket when file storage mode is s3 and minio is enabled
    set:
      fileStorage:
        mode: s3
      minio:
        enabled: true
        buckets:
          - name: fake-bucket
            policy: none
            purge: false
            versioning: false
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_S3_UPLOAD_BUCKET_NAME
            value: fake-bucket

  - it: should set bucket name from s3 object when file storage mode is s3 and minio is enabled but buckets are not set
    set:
      fileStorage:
        mode: s3
        s3:
          bucket: fake-bucket
      minio:
        enabled: true
        buckets: []
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_S3_UPLOAD_BUCKET_NAME
            value: fake-bucket

  - it: should set aws region from s3 object when file storage mode is s3
    set:
      fileStorage:
        mode: s3
        s3:
          region: eu-central-1
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_REGION
            value: eu-central-1

  - it: should set s3 bucket upload url from minio ingress when file storage mode is s3 and minio is enabled
    set:
      fileStorage:
        mode: s3
      minio:
        enabled: true
        ingress:
          hosts:
            - fake-minio-ingress.minio.local
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_S3_UPLOAD_BUCKET_URL
            value: http://fake-minio-ingress.minio.local

  - it: should set s3 bucket upload url from s3 object bucket url when file storage mode is s3 and minio is not enabled
    set:
      fileStorage:
        mode: s3
        s3:
          bucketUrl: https://fake-bucket-url
      minio:
        enabled: false
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_S3_UPLOAD_BUCKET_URL
            value: https://fake-bucket-url

  - it: should set s3 force path style from s3 object when file storage mode is s3
    set:
      fileStorage:
        mode: s3
        s3:
          forcePathStyle: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_S3_FORCE_PATH_STYLE
            value: "true"

  - it: should set s3 acl from s3 object when file storage mode is s3
    set:
      fileStorage:
        mode: s3
        s3:
          acl: public-read
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AWS_S3_ACL
            value: public-read

  - it: should set extra environment variables when extraEnvVars are set
    set:
      extraEnvVars:
        my_key: my_value
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: MY_KEY
            value: my_value

  - it: should set extra secret names for envFrom when extraSecretNamesForEnvFrom are set
    set:
      extraSecretNamesForEnvFrom:
        - fake-existing-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].envFrom
          content:
            secretRef:
              name: fake-existing-secret

  - it: should set extra volume mounts when volumeMounts are set
    set:
      volumeMounts:
        - name: fake-volume
          mountPath: /fake/path
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].volumeMounts
          content:
            name: fake-volume
            mountPath: /fake/path

  - it: should set extra containers (sidecars) when extraContainers are set
    set:
      extraContainers:
        - name: fake-container
          image: fake-image
          command: ["fake-command"]
    asserts:
      - contains:
          path: spec.template.spec.containers
          content:
            name: fake-container
            image: fake-image
            command: ["fake-command"]

  - it: should set extra volumes when volumes are set
    set:
      volumes:
        - name: fake-volume
          persistentVolumeClaim:
            claimName: fake-existing-claim
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: fake-volume
            persistentVolumeClaim:
              claimName: fake-existing-claim

  - it: should set node selector when nodeSelector is set
    set:
      nodeSelector:
        disktype: ssd
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector.disktype
          value: ssd

  - it: should set affinity when affinity is set
    set:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: disktype
                    operator: In
                    values:
                      - ssd
    asserts:
      - contains:
          path: spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution
          content:
            weight: 1
            preference:
              matchExpressions:
                - key: disktype
                  operator: In
                  values:
                    - ssd

  - it: should set tolerations when tolerations are set
    set:
      tolerations:
        - key: fake-key
          operator: fake-operator
          value: fake-value
    asserts:
      - contains:
          path: spec.template.spec.tolerations
          content:
            key: fake-key
            operator: fake-operator
            value: fake-value

  - it: should set entrypoint script from volume mounts when redis is enabled and auth is enabled
    set:
      redis:
        enabled: true
        auth:
          enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].volumeMounts
          content:
            name: entrypoint-volume
            mountPath: /entrypoint.sh
            subPath: entrypoint.sh
      - contains:
          path: spec.template.spec.volumes
          content:
            name: entrypoint-volume
            configMap:
              name: outline-entrypoint
              defaultMode: 0755
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].command
          content:
            /bin/bash
          any: true
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].command
          content:
            /entrypoint.sh
          any: true

  - it: should set entrypoint script from volume mounts when externalRedis is set
    set:
      externalRedis:
        host: fake-host
        port: 6379
        username: fake-username
        password: fake-password
      redis:
        enabled: false
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].volumeMounts
          content:
            name: entrypoint-volume
            mountPath: /entrypoint.sh
            subPath: entrypoint.sh
      - contains:
          path: spec.template.spec.volumes
          content:
            name: entrypoint-volume
            configMap:
              name: outline-entrypoint
              defaultMode: 0755
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].command
          content:
            /bin/bash
          any: true
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].command
          content:
            /entrypoint.sh
          any: true

  - it: should set entrypoint script from volume mounts when externalRedis is set with existing secret
    set:
      externalRedis:
        host: fake-host
        port: 6379
        existingSecret: fake-existing-secret
      redis:
        enabled: false
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].volumeMounts
          content:
            name: entrypoint-volume
            mountPath: /entrypoint.sh
            subPath: entrypoint.sh
      - contains:
          path: spec.template.spec.volumes
          content:
            name: entrypoint-volume
            configMap:
              name: outline-entrypoint
              defaultMode: 0755
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].command
          content:
            /bin/bash
          any: true
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].command
          content:
            /entrypoint.sh
          any: true

  - it: should set slack client secret from existing secret when auth.slack.enabled is true and auth.slack.existingSecret.name is set
    set:
      auth:
        slack:
          enabled: true
          clientId: fake-client-id
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: SLACK_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set google client secret from existing secret when auth.google.enabled is true and auth.google.existingSecret.name is set
    set:
      auth:
        google:
          enabled: true
          clientId: fake-client-id
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: GOOGLE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set azure client secret from existing secret when auth.azure.enabled is true and auth.azure.existingSecret.name is set
    set:
      auth:
        azure:
          enabled: true
          clientId: fake-client-id
          resourceAppId: fake-resource-app-id
          tenantId: fake-tenant-id
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: AZURE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set oidc client secret from existing secret when auth.oidc.enabled is true and auth.oidc.existingSecret.name is set
    set:
      auth:
        oidc:
          enabled: true
          clientId: fake-client-id
          authUri: fake-auth-uri
          tokenUri: fake-token-uri
          userInfoUri: fake-user-info-uri
          logoutUri: fake-logout-uri
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set github client secret from existing secret when auth.github.enabled is true and auth.github.existingSecret.name is set
    set:
      auth:
        github:
          enabled: true
          clientId: fake-client-id
          appName: fake-app-name
          appId: fake-app-id
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
            appPrivateKeyKey: app-private-key
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: GITHUB_APP_PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "app-private-key"

  - it: should set gitea client secret from existing secret when auth.gitea.enabled is true and auth.gitea.existingSecret.name is set
    set:
      auth:
        gitea:
          enabled: true
          clientId: fake-client-id
          baseUrl: fake-base-url
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set gitlab client secret from existing secret when auth.gitlab.enabled is true and auth.gitlab.existingSecret.name is set
    set:
      auth:
        gitlab:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          baseUrl: fake-base-url
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set discord client secret from existing secret when auth.discord.enabled is true and auth.discord.existingSecret.name is set
    set:
      auth:
        discord:
          enabled: true
          clientId: fake-client-id
          serverId: fake-server-id
          serverRoles:
            - fake-role-1
            - fake-role-2
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: DISCORD_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set auth0 client secret from existing secret when auth.auth0.enabled is true and auth.auth0.existingSecret.name is set
    set:
      auth:
        auth0:
          enabled: true
          clientId: fake-client-id
          baseUrl: fake-base-url
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set keycloak client secret from existing secret when auth.keycloak.enabled is true and auth.keycloak.existingSecret.name is set
    set:
      auth:
        keycloak:
          enabled: true
          clientId: fake-client-id
          baseUrl: fake-base-url
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set saml cert from existing secret when auth.saml.enabled is true and auth.saml.existingSecret.name is set
    set:
      auth:
        saml:
          enabled: true
          ssoEndpoint: "fake-sso-endpoint"
          existingSecret:
            name: fake-existing-secret
            certKey: cert
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: SAML_CERT
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: cert

  - it: should set iframely api key from existing secret when integrations.iframely.enabled is true and integrations.iframely.existingSecret.name is set
    set:
      integrations:
        iframely:
          enabled: true
          url: "fake-url"
          existingSecret:
            name: fake-existing-secret
            apiKeyKey: api-key
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: IFRAMELY_API_KEY
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "api-key"

  - it: should set openai api key from existing secret when integrations.openAI.enabled is true and integrations.openAI.existingSecret.name is set
    set:
      integrations:
        openAI:
          enabled: true
          url: "fake-url"
          vectorDatabaseUrl: "fake-vector-database-url"
          existingSecret:
            name: fake-existing-secret
            apiKeyKey: api-key
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "api-key"

  - it: should set slack verification token from existing secret when integrations.slack.enabled is true and integrations.slack.existingSecret.name is set
    set:
      integrations:
        slack:
          enabled: true
          appId: "fake-app-id"
          messageActions: true
          existingSecret:
            name: fake-existing-secret
            verificationTokenKey: verification-token
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: SLACK_VERIFICATION_TOKEN
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "verification-token"

  - it: should set dropbox app key from existing secret when integrations.dropbox.enabled is true and integrations.dropbox.existingSecret.name is set
    set:
      integrations:
        dropbox:
          enabled: true
          existingSecret:
            name: fake-existing-secret
            appKeyKey: app-key
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: DROPBOX_APP_KEY
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "app-key"

  - it: should set linear client id and secret from existing secret when integrations.linear.enabled is true and integrations.linear.existingSecret.name is set
    set:
      integrations:
        linear:
          enabled: true
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: LINEAR_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set notion client id and secret from existing secret when integrations.notion.enabled is true and integrations.notion.existingSecret.name is set
    set:
      integrations:
        notion:
          enabled: true
          existingSecret:
            name: fake-existing-secret
            clientSecretKey: client-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: NOTION_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "client-secret"

  - it: should set smtp username from existing secret when smtp.enabled is true and smtp.existingSecret.name is set
    set:
      smtp:
        host: "fake-host"
        port: 587
        fromEmail: "fake-from-email"
        replyEmail: "fake-reply-email"
        tlsCiphers: "fake-tls-ciphers"
        existingSecret:
          name: fake-existing-secret
          usernameKey: username
          passwordKey: password
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: SMTP_USERNAME
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "username"
      - contains:
          path: spec.template.spec.containers[?(@.name == "outline")].env
          content:
            name: SMTP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fake-existing-secret
                key: "password"

  - it: should set dnsPolicy when dnsPolicy is set
    set:
      dnsPolicy: ClusterFirst
    asserts:
      - equal:
          path: spec.template.spec.dnsPolicy
          value: ClusterFirst
        template: deployment.yaml

  - it: should set dnsConfig when dnsConfig is set
    set:
      dnsConfig:
        nameservers:
          - 1.1.1.1
          - 1.0.0.1
    asserts:
      - contains:
          path: spec.template.spec.dnsConfig.nameservers
          content:
            1.1.1.1
          any: true
        template: deployment.yaml
      - contains:
          path: spec.template.spec.dnsConfig.nameservers
          content:
            1.0.0.1
          any: true
        template: deployment.yaml

  - it: should set dnsPolicy and dnsConfig when dnsPolicy and dnsConfig are set
    set:
      dnsPolicy: None
      dnsConfig:
        nameservers:
          - 1.1.1.1
          - 1.0.0.1
    asserts:
      - equal:
          path: spec.template.spec.dnsPolicy
          value: None
        template: deployment.yaml
      - contains:
          path: spec.template.spec.dnsConfig.nameservers
          content:
            1.1.1.1
          any: true
        template: deployment.yaml
      - contains:
          path: spec.template.spec.dnsConfig.nameservers
          content:
            1.0.0.1
          any: true
        template: deployment.yaml

  - it: should add hostAliases when hostAliases is defined
    set:
      hostAliases:
        - ip: 1.1.1.1
          hostnames:
            - "my-host.com"
    asserts:
      - contains:
          path: spec.template.spec.hostAliases
          content:
            ip: 1.1.1.1
            hostnames:
              - "my-host.com"
          any: true
        template: deployment.yaml
