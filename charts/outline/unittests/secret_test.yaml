suite: test secret

templates:
  - secret.yaml

set:
  externalPostgresql:
    password: fake-postgresql-password
  externalRedis:
    password: fake-redis-password

release:
  name: outline
  namespace: outline

chart:
  version: 1.0.0
  appVersion: 1.0.0

tests:
  - it: should create postgresql secret for external postgresql when postgresql is not enabled and existing secret is not set
    set:
      postgresql:
        enabled: false
      externalPostgresql:
        existingSecret: ""
        password: fake-password
    documentSelector:
      path: metadata.name
      value: outline-postgresql
    asserts:
      - equal:
          path: metadata.name
          value: outline-postgresql
      - equal:
          path: data.postgres-password
          value: fake-password
          decodeBase64: true

  - it: should create redis password secret for external redis when redis is not enabled and existing secret is not set
    set:
      redis:
        enabled: false
      externalRedis:
        existingSecret: ""
        password: fake-password
    documentSelector:
      path: metadata.name
      value: outline-redis
    asserts:
      - equal:
          path: metadata.name
          value: outline-redis
      - equal:
          path: data.redis-password
          value: fake-password
          decodeBase64: true

  - it: should create redis username secret for external redis when redis is not enabled and existing secret is not set
    set:
      redis:
        enabled: false
      externalRedis:
        existingSecret: ""
        username: fake-username
    documentSelector:
      path: metadata.name
      value: outline-redis
    asserts:
      - equal:
          path: metadata.name
          value: outline-redis
      - equal:
          path: data.redis-username
          value: fake-username
          decodeBase64: true

  - it: should create s3 secret for file storage when file storage mode is s3 and existing secret is not set and minio is not enabled
    set:
      fileStorage:
        mode: s3
        s3:
          existingSecret: ""
          accessKeyId: fake-access-key-id
          secretAccessKey: fake-secret-access-key
      minio:
        enabled: false
    documentSelector:
      path: metadata.name
      value: outline-s3-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-s3-secret
      - equal:
          path: data.access-key-id
          value: fake-access-key-id
          decodeBase64: true
      - equal:
          path: data.secret-access-key
          value: fake-secret-access-key
          decodeBase64: true

  - it: should create s3 secret for file storage when file storage mode is s3 and existing secret is not set and minio is enabled
    set:
      fileStorage:
        mode: s3
        s3:
          existingSecret: ""
      minio:
        enabled: true
        users:
          - accessKey: fake-access-key-id
            secretKey: fake-secret-access-key
            policy: fake-policy
    documentSelector:
      path: metadata.name
      value: outline-s3-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-s3-secret
      - equal:
          path: data.access-key-id
          value: fake-access-key-id
          decodeBase64: true
      - equal:
          path: data.secret-access-key
          value: fake-secret-access-key
          decodeBase64: true

  - it: should set slack client id and secret when auth.slack.enabled is true
    set:
      auth:
        slack:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.SLACK_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.SLACK_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true

  - it: should set google client id and secret when auth.google.enabled is true
    set:
      auth:
        google:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.GOOGLE_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.GOOGLE_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true

  - it: should set azure client id and secret when auth.azure.enabled is true
    set:
      auth:
        azure:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          resourceAppId: fake-resource-app-id
          tenantId: fake-tenant-id
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.AZURE_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.AZURE_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
      - equal:
          path: data.AZURE_RESOURCE_APP_ID
          value: fake-resource-app-id
          decodeBase64: true
      - equal:
          path: data.AZURE_TENANT_ID
          value: fake-tenant-id
          decodeBase64: true

  - it: should set github client id and secret when auth.github.enabled is true
    set:
      auth:
        github:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          appName: fake-app-name
          appId: fake-app-id
          appPrivateKey: fake-app-private-key
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.GITHUB_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.GITHUB_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
      - equal:
          path: data.GITHUB_APP_NAME
          value: fake-app-name
          decodeBase64: true
      - equal:
          path: data.GITHUB_APP_ID
          value: fake-app-id
          decodeBase64: true
          
  - it: should set discord client id and secret when auth.discord.enabled is true
    set:
      auth:
        discord:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          serverId: fake-server-id
          serverRoles:
            - fake-server-role-1
            - fake-server-role-2
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.DISCORD_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.DISCORD_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
      - equal:
          path: data.DISCORD_SERVER_ID
          value: fake-server-id
          decodeBase64: true
      - equal:
          path: data.DISCORD_SERVER_ROLES
          value: "fake-server-role-1,fake-server-role-2"
          decodeBase64: true

  - it: should set gitea client id and secret when auth.gitea.enabled is true
    set:
      auth:
        gitea:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          baseUrl: https://gitea.com
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.OIDC_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.OIDC_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
      - equal:
          path: data.OIDC_AUTH_URI
          value: https://gitea.com/login/oauth/authorize
          decodeBase64: true
      - equal:
          path: data.OIDC_TOKEN_URI
          value: https://gitea.com/login/oauth/access_token
          decodeBase64: true
      - equal:
          path: data.OIDC_USERINFO_URI
          value: https://gitea.com/login/oauth/userinfo
          decodeBase64: true
      - equal:
          path: data.OIDC_USERNAME_CLAIM
          value: fake-username-claim
          decodeBase64: true
      - equal:
          path: data.OIDC_DISPLAY_NAME
          value: fake-display-name
          decodeBase64: true
      - equal:
          path: data.OIDC_SCOPES
          value: "fake-scope-1 fake-scope-2"
          decodeBase64: true

  - it: should set gitlab client id and secret when auth.gitlab.enabled is true
    set:
      auth:
        gitlab:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          baseUrl: https://gitlab.com
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.OIDC_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.OIDC_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
      - equal:
          path: data.OIDC_AUTH_URI
          value: https://gitlab.com/oauth/authorize
          decodeBase64: true
      - equal:
          path: data.OIDC_TOKEN_URI
          value: https://gitlab.com/oauth/token
          decodeBase64: true
      - equal:
          path: data.OIDC_USERINFO_URI
          value: https://gitlab.com/oauth/userinfo
          decodeBase64: true
      - equal:
          path: data.OIDC_USERNAME_CLAIM
          value: fake-username-claim
          decodeBase64: true
      - equal:
          path: data.OIDC_DISPLAY_NAME
          value: fake-display-name
          decodeBase64: true
      - equal:
          path: data.OIDC_SCOPES
          value: "fake-scope-1 fake-scope-2"
          decodeBase64: true

  - it: should set auth0 client id and secret when auth.auth0.enabled is true
    set:
      auth:
        auth0:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          baseUrl: https://auth0.com
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.OIDC_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.OIDC_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
      - equal:
          path: data.OIDC_AUTH_URI
          value: https://auth0.com/authorize
          decodeBase64: true
      - equal:
          path: data.OIDC_TOKEN_URI
          value: https://auth0.com/oauth/token
          decodeBase64: true
      - equal:
          path: data.OIDC_USERINFO_URI
          value: https://auth0.com/userinfo
          decodeBase64: true
      - equal:
          path: data.OIDC_USERNAME_CLAIM
          value: fake-username-claim
          decodeBase64: true
      - equal:
          path: data.OIDC_DISPLAY_NAME
          value: fake-display-name
          decodeBase64: true
      - equal:
          path: data.OIDC_SCOPES
          value: "fake-scope-1 fake-scope-2"
          decodeBase64: true

  - it: should set keycloak client id and secret when auth.keycloak.enabled is true
    set:
      auth:
        keycloak:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          baseUrl: https://keycloak.com
          realmName: fake-realm-name
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.OIDC_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.OIDC_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
      - equal:
          path: data.OIDC_AUTH_URI
          value: https://keycloak.com/realms/fake-realm-name/protocol/openid-connect/auth
          decodeBase64: true
      - equal:
          path: data.OIDC_TOKEN_URI
          value: https://keycloak.com/realms/fake-realm-name/protocol/openid-connect/token
          decodeBase64: true
      - equal:
          path: data.OIDC_USERINFO_URI
          value: https://keycloak.com/realms/fake-realm-name/protocol/openid-connect/userinfo
          decodeBase64: true
      - equal:
          path: data.OIDC_LOGOUT_URI
          value: https://keycloak.com/realms/fake-realm-name/protocol/openid-connect/logout
          decodeBase64: true
      - equal:
          path: data.OIDC_USERNAME_CLAIM
          value: fake-username-claim
          decodeBase64: true
      - equal:
          path: data.OIDC_DISPLAY_NAME
          value: fake-display-name
          decodeBase64: true
      - equal:
          path: data.OIDC_SCOPES
          value: "fake-scope-1 fake-scope-2"
          decodeBase64: true

  - it: should set oidc client id and secret when auth.oidc.enabled is true
    set:
      auth:
        oidc:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
          authUri: https://oidc.com/auth
          tokenUri: https://oidc.com/token
          userInfoUri: https://oidc.com/userinfo
          logoutUri: https://oidc.com/logout
          usernameClaim: fake-username-claim
          displayName: fake-display-name
          scopes:
            - fake-scope-1
            - fake-scope-2
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.OIDC_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.OIDC_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
      - equal:
          path: data.OIDC_AUTH_URI
          value: https://oidc.com/auth
          decodeBase64: true
      - equal:
          path: data.OIDC_TOKEN_URI
          value: https://oidc.com/token
          decodeBase64: true
      - equal:
          path: data.OIDC_USERINFO_URI
          value: https://oidc.com/userinfo
          decodeBase64: true
      - equal:
          path: data.OIDC_LOGOUT_URI
          value: https://oidc.com/logout
          decodeBase64: true
      - equal:
          path: data.OIDC_USERNAME_CLAIM
          value: fake-username-claim
          decodeBase64: true
      - equal:
          path: data.OIDC_DISPLAY_NAME
          value: fake-display-name
          decodeBase64: true
      - equal:
          path: data.OIDC_SCOPES
          value: "fake-scope-1 fake-scope-2"
          decodeBase64: true

  - it: should set saml sso endpoint and cert when auth.saml.enabled is true
    set:
      auth:
        saml:
          enabled: true
          ssoEndpoint: https://saml.com/sso
          cert: fake-cert
    documentSelector:
      path: metadata.name
      value: outline-auth-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-auth-secret
      - equal:
          path: data.SAML_SSO_ENDPOINT
          value: https://saml.com/sso
          decodeBase64: true
      - equal:
          path: data.SAML_CERT
          value: fake-cert
          decodeBase64: true

  - it: should set smtp host and port when smtp.enabled is set
    set:
      smtp:
        host: fake-host
        port: 587
        username: fake-username
        password: fake-password
        fromEmail: fake-from-email
        replyEmail: fake-reply-email
        tlsCiphers: fake-tls-ciphers
        secure: true
    documentSelector:
      path: metadata.name
      value: outline-smtp-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-smtp-secret
      - equal:
          path: data.SMTP_HOST
          value: fake-host
          decodeBase64: true
      - equal:
          path: data.SMTP_PORT
          value: "587"
          decodeBase64: true
      - equal:
          path: data.SMTP_USERNAME
          value: fake-username
          decodeBase64: true
      - equal:
          path: data.SMTP_PASSWORD
          value: fake-password
          decodeBase64: true
      - equal:
          path: data.SMTP_FROM_EMAIL
          value: fake-from-email
          decodeBase64: true
      - equal:
          path: data.SMTP_REPLY_EMAIL
          value: fake-reply-email
          decodeBase64: true
      - equal:
          path: data.SMTP_TLS_CIPHERS
          value: fake-tls-ciphers
          decodeBase64: true
      - equal:
          path: data.SMTP_SECURE
          value: "true"
          decodeBase64: true

  - it: should set iframely url and api key when integrations.iframely.enabled is true
    set:
      integrations:
        iframely:
          enabled: true
          url: https://iframely.com
          apiKey: fake-api-key
    documentSelector:
      path: metadata.name
      value: outline-integrations-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-integrations-secret
      - equal:
          path: data.IFRAMELY_URL
          value: https://iframely.com
          decodeBase64: true
      - equal:
          path: data.IFRAMELY_API_KEY
          value: fake-api-key
          decodeBase64: true

  - it: should set gotenberg url when integrations.pdfExport.enabled is true
    set:
      integrations:
        pdfExport:
          enabled: true
          gotenbergUrl: https://gotenberg.com
    documentSelector:
      path: metadata.name
      value: outline-integrations-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-integrations-secret
      - equal:
          path: data.GOTENBERG_URL
          value: https://gotenberg.com
          decodeBase64: true

  - it: should set sentry dsn and tunnel when integrations.sentry.enabled is true
    set:
      integrations:
        sentry:
          enabled: true
          dsn: fake-dsn
          tunnel: fake-tunnel
    documentSelector:
      path: metadata.name
      value: outline-integrations-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-integrations-secret
      - equal:
          path: data.SENTRY_DSN
          value: fake-dsn
          decodeBase64: true
      - equal:
          path: data.SENTRY_TUNNEL
          value: fake-tunnel
          decodeBase64: true

  - it: should set slack verification token and app id when integrations.slack.enabled is true
    set:
      integrations:
        slack:
          enabled: true
          verificationToken: fake-verification-token
          appId: fake-app-id
          messageActions: true
    documentSelector:
      path: metadata.name
      value: outline-integrations-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-integrations-secret
      - equal:
          path: data.SLACK_VERIFICATION_TOKEN
          value: fake-verification-token
          decodeBase64: true
      - equal:
          path: data.SLACK_APP_ID
          value: fake-app-id
          decodeBase64: true
      - equal:
          path: data.SLACK_MESSAGE_ACTIONS
          value: "true"
          decodeBase64: true

  - it: should set dropbox app key when integrations.dropbox.enabled is true
    set:
      integrations:
        dropbox:
          enabled: true
          appKey: fake-app-key
    documentSelector:
      path: metadata.name
      value: outline-integrations-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-integrations-secret
      - equal:
          path: data.DROPBOX_APP_KEY
          value: fake-app-key
          decodeBase64: true

  - it: should set linear client id and secret when integrations.linear.enabled is true
    set:
      integrations:
        linear:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
    documentSelector:
      path: metadata.name
      value: outline-integrations-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-integrations-secret
      - equal:
          path: data.LINEAR_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.LINEAR_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true

  - it: should set notion client id and secret when integrations.notion.enabled is true
    set:
      integrations:
        notion:
          enabled: true
          clientId: fake-client-id
          clientSecret: fake-client-secret
    documentSelector:
      path: metadata.name
      value: outline-integrations-secret
    asserts:
      - equal:
          path: metadata.name
          value: outline-integrations-secret
      - equal:
          path: data.NOTION_CLIENT_ID
          value: fake-client-id
          decodeBase64: true
      - equal:
          path: data.NOTION_CLIENT_SECRET
          value: fake-client-secret
          decodeBase64: true
