suite: test secret

templates:
  - secret.yaml

release:
  name: n8n
  namespace: n8n

chart:
  version: 1.0.0
  appVersion: 1.0.0

tests:
  - it: should create secret with postgres-password when db type is postgresdb and postgresql.enabled is false and externalPostgresql.existingSecret is not set
    set:
      db:
        type: postgresdb
      postgresql:
        enabled: false
      externalPostgresql:
        existingSecret: ""
        password: my-secret-password
    documentSelector:
      path: metadata.name
      value: n8n-postgresql
    asserts:
      - equal:
          path: data.postgres-password
          value: my-secret-password
          decodeBase64: true

  - it: should create secret with encryption-key when encryptionKey is set
    set:
      encryptionKey: my-secret-key
    documentSelector:
      path: metadata.name
      value: n8n-encryption-key-secret-v2
    asserts:
      - equal:
          path: data.N8N_ENCRYPTION_KEY
          value: my-secret-key
          decodeBase64: true

  - it: should create secret with redis username and password when worker.mode is queue and redis.enabled is false and externalRedis.existingSecret is not set
    set:
      worker:
        mode: queue
      redis:
        enabled: false
      externalRedis:
        existingSecret: ""
        username: my-redis-username
        password: my-redis-password
    documentSelector:
      path: metadata.name
      value: n8n-redis
    asserts:
      - equal:
          path: data.redis-username
          value: my-redis-username
          decodeBase64: true
      - equal:
          path: data.redis-password
          value: my-redis-password
          decodeBase64: true

  - it: should set default redis username when worker.mode is queue and redis.enabled is false and externalRedis.existingSecret is not set and externalRedis.username is not set
    set:
      worker:
        mode: queue
      redis:
        enabled: false
      externalRedis:
        existingSecret: ""
        username: ""
        password: my-redis-password
    documentSelector:
      path: metadata.name
      value: n8n-redis
    asserts:
      - equal:
          path: data.redis-username
          value: default
          decodeBase64: true

  - it: should set main node auth token when taskRunners.mode is external
    set:
      taskRunners:
        mode: external
        external:
          mainNodeAuthToken: my-main-node-auth-token
    documentSelector:
      path: metadata.name
      value: n8n-task-runners-secret
    asserts:
      - equal:
          path: data.auth-token
          value: my-main-node-auth-token
          decodeBase64: true

  - it: should set worker node auth token when taskRunners.mode is external
    set:
      taskRunners:
        mode: external
        external:
          workerNodeAuthToken: my-worker-node-auth-token
    documentSelector:
      path: metadata.name
      value: n8n-task-runners-secret
    asserts:
      - equal:
          path: data.worker-auth-token
          value: my-worker-node-auth-token
          decodeBase64: true

  - it: should set license activation key when license.enabled is true and license.activationKey is set and license.existingActivationKeySecret is not set
    set:
      license:
        enabled: true
        activationKey: my-license-activation-key
        existingActivationKeySecret: ""
    documentSelector:
      path: metadata.name
      value: n8n-license-activation-key
    asserts:
      - equal:
          path: data.N8N_LICENSE_ACTIVATION_KEY
          value: my-license-activation-key
          decodeBase64: true

  - it: should create secret with npmrc when npmRegistry.enabled is true
    set:
      npmRegistry:
        enabled: true
        url: "https://my-registry.com"
        customNpmrc: "registry=https://my-registry.com"
    documentSelector:
      path: metadata.name
      value: n8n-npm-registry-secret
    asserts:
      - equal:
          path: data.npmrc
          value: "registry=https://my-registry.com"
          decodeBase64: true

  - it: should create CA certificate secret when db.type postgresdb, postgresdb.ssl.enabled, and postgresdb.ssl.base64EncodedCertificateAuthorityFile are set
    set:
      db:
        type: postgresdb
        postgresdb:
          ssl:
            enabled: true
            base64EncodedCertificateAuthorityFile: Q0EgZmlsZSBjb250ZW50
    documentSelector:
      path: metadata.name
      value: n8n-pg-ssl-ca
    asserts:
      - equal:
          path: data["ca.crt"]
          value: "CA file content"
          decodeBase64: true

  - it: should create certificate secret when db.type postgresdb, postgresdb.ssl.enabled, and postgresdb.ssl.base64EncodedCertFile are set
    set:
      db:
        type: postgresdb
        postgresdb:
          ssl:
            enabled: true
            base64EncodedCertFile: Y2VydGlmaWNhdGUgZmlsZSBjb250ZW50
    documentSelector:
      path: metadata.name
      value: n8n-pg-ssl-cert
    asserts:
      - equal:
          path: data["cert.crt"]
          value: "certificate file content"
          decodeBase64: true

  - it: should create certificate private key secret when db.type postgresdb, postgresdb.ssl.enabled, and postgresdb.ssl.base64EncodedPrivateKeyFile are set
    set:
      db:
        type: postgresdb
        postgresdb:
          ssl:
            enabled: true
            base64EncodedPrivateKeyFile: Y2VydGlmaWNhdGUgcHJpdmF0ZSBrZXkgZmlsZSBjb250ZW50
    documentSelector:
      path: metadata.name
      value: n8n-pg-ssl-key
    asserts:
      - equal:
          path: data["cert.key"]
          value: "certificate private key file content"
          decodeBase64: true

  - it: should match snapshot of default values
    set:
      encryptionKey: my-secret-key
      taskRunners:
        mode: internal
    asserts:
      - matchSnapshot: { }

  - it: should match snapshot of postgresql ssl fake certificate values
    set:
      encryptionKey: my-secret-key
      db:
        type: postgresdb
        postgresdb:
          ssl:
            enabled: true
            base64EncodedCertificateAuthorityFile: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURoRENDQW15Z0F3SUJBZ0lSQU5ia0NNamVoMHh3bml2bGxHcXBhdjR3RFFZSktvWklodmNOQVFFTEJRQXcKU3pFZ01CNEdBMVVFQXd3WFRVeEdiRzkzSUV4RVFWQXRVMU5NTFZSbGMzUWdRMEV4RHpBTkJnTlZCQW9NQmsxTQpSbXh2ZHpFV01CUUdBMVVFQ3d3TlRFUkJVQzFUVTB3dFZHVnpkREFlRncweU5UQTRNVGt3T0RRME1EaGFGdzB5Ck5UQTRNakF3T0RRME1EaGFNRXN4SURBZUJnTlZCQU1NRjAxTVJteHZkeUJNUkVGUUxWTlRUQzFVWlhOMElFTkIKTVE4d0RRWURWUVFLREFaTlRFWnNiM2N4RmpBVUJnTlZCQXNNRFV4RVFWQXRVMU5NTFZSbGMzUXdnZ0VpTUEwRwpDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREtqaGdvZnB4Q3JGWDA0N3NBcFRTclc0bSs4eFN6CmdLTXo1ZVFlZmh0VWJpNkhweUVPaHdNb2RXajJzOUhRak5YbWdZM3pzV0trcWc5TlU3MkRLVDFLcXNvRmMzeG4KZEhmU25HL2QzcGVwdHRpQ01jUVFrMElPZTJZSFpDTnlwQ0h0MVR4MCtMZzJwTHJjalpKZEZhNTJmNjZVRWZraAo0YnBqV3R2c1JubnY3bWFJUnJkZ1g2ZjFrc3pGRS9SSE9kWG4xSk9ORTFVaVJ1RE5Ba2lWNFdjQUFvKzIxVCs5Ck1VUktZdDQ0RkR4Smk4QlROdTFENTgxakp1ZmQrdXR6YkRJRllyREt2QjduSm9LT2NwVWpKYmJYdjdzbk1pMGgKUnlkcnVmQk1QWHdBc2dvMlZVMGRZSWh6RG5wOEhuSEFaU0Z4Tkw5NFRyUWJUTVhNRUs4RXRxY25BZ01CQUFHagpZekJoTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZERnUVdCQlFKCk9zT3d1VGFzUFhsN3RSTnZPZ1FySUl3bUxqQWZCZ05WSFNNRUdEQVdnQlFKT3NPd3VUYXNQWGw3dFJOdk9nUXIKSUl3bUxqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFGNlVrS2R1RlVtTUdqNVRGUGVrc1Q4SnVRMndleHdhQQp1OFFlVW14eGJQb1BwQW1henlIODFYZFlIcWgwMmZHS21UcFVxbk12WHFrYzlkM1BlMFFweGcxRGhmMUliVWNlCkFvSUtFazU4TUJLSk82RzJaOTI3bU5UOGVsZkUvM0xBTS9pRndNMHcwVk8yOHgrMHNwVGlrazFiSFFEaWZmeVAKT3QyMTlha0MzVVRJZkJ1UHIrU2o3aVV3ZjdORk1yQmIwMGtZM3VkN1k2MEtjZUNVSVpXTTN5cTArNTEydGFTaQpVMHMrM1laOWxKdk9MTHhlRmg3ZGY0QTlGcWh5VVRUQitqZUVDSzFiVzA2ejB1UWl4aWpuWm1GSDcwSmxOK2NpCnk4VjRSZ0dwMzF3TG1CZFNjVFlWdldIbSttSnNUK2lHbUhMN3VOVTdEVEg1SXU0MW9nYWFpQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
            base64EncodedCertFile: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURvVENDQW9tZ0F3SUJBZ0lSQU8vMEFLRXppVWdWazQ4SWx1SWtDMGN3RFFZSktvWklodmNOQVFFTEJRQXcKU3pFZ01CNEdBMVVFQXd3WFRVeEdiRzkzSUV4RVFWQXRVMU5NTFZSbGMzUWdRMEV4RHpBTkJnTlZCQW9NQmsxTQpSbXh2ZHpFV01CUUdBMVVFQ3d3TlRFUkJVQzFUVTB3dFZHVnpkREFlRncweU5UQTRNVGt3T0RRME1EaGFGdzB5Ck5UQTRNakF3T0RRME1EaGFNRGt4RGpBTUJnTlZCQU1NQld4c1pHRndNUTh3RFFZRFZRUUtEQVpOVEVac2IzY3gKRmpBVUJnTlZCQXNNRFV4RVFWQXRVMU5NTFZSbGMzUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdwpnZ0VLQW9JQkFRQ1A5cW81S3VqMXVqVTREbjM5cTB1VFgxekVqNlZ5Si9NWVRUVnI5RU1WU0hoc0FvSytSR3ZKCnErUkorVkhBcFByanM5QVVqU0RzQ3N1M0JJZFJpOHdjcy93UExLdnhpaURPRytKbG9wemJsVVVBeU1FZytJaDcKTGdNVm1yczR2dmIzRWlvNG1MbWhHS0UyazdZOEhmWG1nazYrQy9nZUwra0hINkdIbmU0YWMrZnNtbndtOGhaZgpVY0F3T0Z3bzZNS2VkOHNpekdtWDFjVS9QbVU3ekJPWjQ1amdlalFldm9JL1BmVHNSai83Zm1rRUpnSUxlcmQrCmdaWGgzNm5VNXdROVluNW1XNkZaeGZWY1RXWmlCWDl4VDJkeWhkK2VzenQweWQwbStOeFYxdldEYW14aFJuU2gKeHh3VFBLY2dqNi9mRGYrUThYcDhlK2txRlhjQWYxQkpBZ01CQUFHamdaRXdnWTR3T1FZRFZSMFJCREl3TUlJRgpiR3hrWVhDQ0NXeHZZMkZzYUc5emRJY0Vmd0FBQVljUUFBQUFBQUFBQUFBQUFBQUFBQUFBQVljRUFBQUFBREFPCkJnTlZIUThCQWY4RUJBTUNCUEF3SUFZRFZSMGxBUUgvQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUI4R0ExVWRJd1FZTUJhQUZBazZ3N0M1TnF3OWVYdTFFMjg2QkNzZ2pDWXVNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFDUmRjTkVRRW5tZU5mWk1iV1dBOVIzdmtwL3kyd1A4M3RkQ040ckdGTUNCWTRjYTFHdE9NTFhQaGlaClR2SXg2dURPbkE2dm5RemV1bStQQWF2bHpvdXExakFlYm0ycWFFOFA4bDlUSE50cmM5OFBwVzJVdWltbzg2czMKK3FWQmVQcTU5Tmx1OWI4TXB4eHJRcWxaSVJXOGRmMHRVU09CUFdHaXVOOHdudkVhbW9mdkh6SXZaWTdDeHA3SAppN2xOTFhBY05xcElIallmb0hHdktDTlh6Zk1SYi9zRWZhbENKSm0vTllHeWNZNE0rUU8wakVrNDhuNThwSTFKClRIQ0ppU212L3BNeDU0bktnRVdrRTVGOW5kajZsRm50ZktsejI4OHRnVE5EM0VpUVphOVpKWTB6UzNQUmpwak8Ka2tmUlhTQzV2RnV3WHlnVzNnNmYxVm5tdXc1UQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
            base64EncodedPrivateKeyFile: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBai9hcU9Tcm85Ym8xT0E1OS9hdExrMTljeEkrbGNpZnpHRTAxYS9SREZVaDRiQUtDCnZrUnJ5YXZrU2ZsUndLVDY0N1BRRkkwZzdBckx0d1NIVVl2TUhMUDhEeXlyOFlvZ3podmlaYUtjMjVWRkFNakIKSVBpSWV5NERGWnE3T0w3Mjl4SXFPSmk1b1JpaE5wTzJQQjMxNW9KT3ZndjRIaS9wQngraGg1M3VHblBuN0pwOApKdklXWDFIQU1EaGNLT2pDbm5mTElzeHBsOVhGUHo1bE84d1RtZU9ZNEhvMEhyNkNQejMwN0VZLyszNXBCQ1lDCkMzcTNmb0dWNGQrcDFPY0VQV0orWmx1aFdjWDFYRTFtWWdWL2NVOW5jb1hmbnJNN2RNbmRKdmpjVmRiMWcycHMKWVVaMG9jY2NFenluSUkrdjN3My9rUEY2Zkh2cEtoVjNBSDlRU1FJREFRQUJBb0lCQUJDZG00LzFqK1dzbEMvZwpIRktHenJZM3IzRlFVdndWK0V5NXZJeTFLSGp3WUZXM0JIZ0pWWmQxSzJnT1NvMDlmV2VDZldXaDFFYnFDQkViCmlMSzB1OTRrTjlkWWhJL2dMV0VjZnNqVU45NXdJQUt6S1BjeE9DOWZaQ08rTkJXY2xNeDNZRUFnQUd6RGR2ZmgKbklyYnVtSGNjRkltOTRBa2IzVFBCY210Uktud3dtYVVoV1ppbmtjKytqYkI2aS9RcitOTWhBSEIvckY4Q1RQaQpFbHIrU1hnRm0yTzh2MzEvNFBDTXJiaWJ6aHdRLzRjWlVpb3hremtkWE9NL1NFLzJGbGRPY0ZuZ1B6WGtlMlN1CnIyOElmY2RLZEpJTkFEN1pRNlViVC8reVN5WU04VVk2SGxnQ2NxS0xCSHJyUm9mYlFNZG5Ndi9iSDc3TUx6dnUKVHVsMk56RUNnWUVBd2l2TXV4czNIUmNmTHBnNVJ4ajIxSW5Sd2dyODJDb2h5bkNDZmNuMkRFMHJ3d29xcVJQbwpsWDl5Q1ZVTEc2OXlUZ0QwY0UxTksyVVBISTEvSzR6ak9yRm1EYUdpV0FtdGxyWlFpMm9XMUFGVFJhRWNRejlLCnc2MWtUUmQ1Y2NwdnYvSThQcnRkdlFUaVhTNnVCM1FrY3NGNWI4Q0N6TW9DOUU4dGZrazNQMHNDZ1lFQXZjNGIKZGpmL2xvYzl3WFY0ZkFiSEJuTCtVMWF4b2w1UUhYZVROd0xONCtOS011Nko2dEJmcUR1L2hpWWpmbmFXRWMydwp5QzVxU0xtM0N2bk5uM2w3WWpUR3RQMEZWUVN6TXVIQkpsRGcxV2w2bEhkVk9mVTRkYXNBcXl0eGd1YWxHWkpyCldaTHQ2RkRCVDBhVVFySzRwMHdtc0ZZLzJlYVlia2tOUFZ4RTdqc0NnWUJOUFVzbHF2L1RqSjBVMWUwREFVVSsKNnN3TUduN1dKbnhtb1RibmZ1MW5tMU1yTk9JZmZCSHJWbFV3clNuTUM1QzJ3dDU1eGVaS3V0cTJDdnRwZ1pQcQpoeU1IalNLZFRzeEV4YVZvci8wQXZMNDVWb3Q5bkxITEFUQ0RFakYzT0lZWG51NmtMYmh1Tm9FdGZDSXlTTnN1CjR4UEJocDBCaGVLQytQUXA1a29aM1FLQmdRQ2hwSmJFbmpvZjh2dEg5NGZ0Y0VRdEhOKzFENzdsL1pZVEVsT2cKWk5YOVB3Tmd6cjlMNTd1ZlpZcmRienVKSnVyMUxJeGlYdzBLOUlhTFpXU1ZiUHNFRHRndktOQlNzRmNBZlR4bQpLampmNXgyS3RQb3pDc0RUalJkYnJ2clR0U05qM010cGxIVGlCV3dyM0hyRk5ybUZXSmdXVXMyNy8rTlBBUTJ5CmRSTUxJd0tCZ1FDSmNBaDg5emNId2NHdXNMc04wa3dncXRLcnVlUjdqa0lKVWo3S2hOMEhxcDNPMEF5WElyUUEKQld6TmZHc3dWTTZQcERUOCs5cGV4aTJDRSt0bDB3bFZKRWk0UElrSWVieVcyTTdzNjlOR1ZoVGxzNENvZS9nSgpwZGNIeTFHdnpSUExoRFNyczN2dzFYOExPbk0wYnVIT2JlaUxiT0loYy85SGpVR3pCTTBBUFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
    asserts:
      - matchSnapshot: { }
