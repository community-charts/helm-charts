# Default values for drone.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Image pull secrets for private docker registry usages
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# - name: "image-pull-secret"

# -- String to override the default generated name
nameOverride: ""

# -- String to override the default generated fullname
fullnameOverride: ""

server:
  # -- (int) Numbers of server replicas
  replicaCount: 1

  image:
    # -- The drone server docker image repository to use
    repository: drone/drone
    # -- The drone server image tag to use. Default app version
    tag: ""
    # -- The drone server image pull policy
    pullPolicy: IfNotPresent

  serviceAccount:
    # -- Specifies whether a Drone server ServiceAccount should be created
    create: true
    # -- Annotations to add to the drone server service account.
    annotations: {}
    # -- The name of the drone server service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- Annotations for the drone server pod
  podAnnotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "80"

  # -- Security context for all drone server pod
  podSecurityContext: {}
    # fsGroup: 2000

  # -- Security context for the drone server container
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    # -- Specifies what type of drone server Service should be created
    type: ClusterIP
    # -- Default drone server Service port
    port: 80
    # -- Additional drone server service annotations
    annotations: {}

  ingress:
    # -- Specifies if you want to create an ingress access to drone server
    enabled: false
    # -- Specifies if you want to use different ingress controller for drone server
    className: ""
    # -- Additional drone server ingress annotations
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            # -- Drone server ingress path type
            pathType: ImplementationSpecific
    # -- Drone server ingress tls configuration for https access
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- Set the drone server resources requests and limits
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  env:
    # -- REQUIRED: Set the user-visible Drone hostname, sans protocol.
    # Ref: https://docs.drone.io/server/reference/drone-server-host/
    DRONE_SERVER_HOST: "drone.example.com"
    # -- The protocol to pair with the value in DRONE_SERVER_HOST (http or https).
    # Ref: https://docs.drone.io/server/reference/drone-server-proto/
    DRONE_SERVER_PROTO: http

    ## If you'd like to use a DB other than SQLite (the default), set a driver + DSN here.
    ## Ref: https://docs.drone.io/server/storage/database/
    # DRONE_DATABASE_DRIVER: postgres

    # -- If you are using self-hosted GitHub or GitLab, you'll need to set this to true.
    # Ref: https://docs.drone.io/server/reference/drone-git-always-auth/
    DRONE_GIT_ALWAYS_AUTH: false

  # -- Drone server secrets
  secrets: {}
    ## If you are going to store build secrets in the Drone database, it is suggested that
    ## you set a database encryption secret. This must be set before any secrets are stored
    ## in the database.
    ## Ref: https://docs.drone.io/server/storage/encryption/
    # DRONE_DATABASE_SECRET:

    ## If you'd like to use a DB other than SQLite (the default), set a driver + DSN here.
    ## Ref: https://docs.drone.io/server/storage/database/
    ##
    # DRONE_DATABASE_DATASOURCE: postgres://postgres:postgres@postgres-svc.default.svc.cluster.local:5432/drone?sslmode=disable

    ## ===================================================================================
    ##                         Provider Directives (select ONE)
    ## -----------------------------------------------------------------------------------
    ## Select one provider (and only one). Refer to the corresponding documentation link
    ## before filling the values in. Also note that you can use the 'secretMounts' value
    ## if you'd rather not have secrets in Kubernetes Secret instead of a ConfigMap.
    ## ===================================================================================

    ## GitHub-specific variables. See the provider docs here:
    ## Ref: https://docs.drone.io/server/provider/github/
    ##
    # DRONE_GITHUB_CLIENT_ID:
    # DRONE_GITHUB_CLIENT_SECRET:

    ## GitHub Enterprise-specific variables. See the provider docs here:
    ## Ref: https://docs.drone.io/server/provider/github-enterprise/
    ##
    # DRONE_GITHUB_CLIENT_ID:
    # DRONE_GITHUB_CLIENT_SECRET:
    # DRONE_GITHUB_SERVER:

    ## GitLab-specific variables. See the provider docs here:
    ## Ref: https://docs.drone.io/server/provider/gitlab/
    ##
    # DRONE_GITLAB_CLIENT_ID:
    # DRONE_GITLAB_CLIENT_SECRET:
    # DRONE_GITLAB_SERVER:

    ## Bitbucket Cloud-specific variables. See the provider docs here:
    ## Ref: https://docs.drone.io/server/provider/bitbucket-cloud/
    ##
    # DRONE_BITBUCKET_CLIENT_ID:
    # DRONE_BITBUCKET_CLIENT_SECRET:

    ## Bitbucket-specific variables. See the provider docs here:
    ## Ref: https://docs.drone.io/server/provider/bitbucket-server/
    ##
    # DRONE_GIT_USERNAME:
    # DRONE_GIT_PASSWORD:
    # DRONE_STASH_CONSUMER_KEY:
    # DRONE_STASH_PRIVATE_KEY:
    # DRONE_STASH_SERVER:

    ## Gitee-specific variables. See the provider docs here:
    ## Ref: https://docs.drone.io/server/provider/gitee/
    ##
    # DRONE_GITEE_CLIENT_ID:
    # DRONE_GITEE_CLIENT_SECRET:
    #

    ## Gitea-specific variables. See the provider docs here:
    ## Ref: https://docs.drone.io/server/provider/gitea/
    ##
    # DRONE_GITEA_CLIENT_ID:
    # DRONE_GITEA_CLIENT_SECRET:
    # DRONE_GITEA_SERVER:

    ## Gogs-specific variables. See the provider docs here:
    ## Ref: https://docs.drone.io/server/provider/gogs/
    ##
    # DRONE_GOGS_SERVER:

    # DRONE_USER_CREATE: "username:drone,admin:true"

  # -- Set the node selector for the drone server pod.
  nodeSelector: {}

  # -- Set the tolerations for the drone server pod.
  tolerations: []

  # -- Set the affinity for the drone server pod.
  affinity: {}

  # -- If you'd like to make additional files or volumes available to Drone, declare additional
  # Volumes here per the Pod spec's "volumes" section.
  # Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  extraVolumes: []

  # -- If you have declared extra volumes, mount them here, per the Pod Container's
  # "volumeMounts" section.
  extraVolumeMounts: []

  persistentVolume:
    # -- If you are using SQLite as your DB for Drone, it is recommended to enable persistence. If
    # enabled, the Chart will create a PersistentVolumeClaim to store its state in. If you are
    # using a DB other than SQLite, set this to false to avoid allocating unused storage.
    # If set to false, Drone will use an emptyDir instead, which is ephemeral.
    enabled: true

    # -- Drone server data Persistent Volume access modes
    # Must match those of existing PV or dynamic provisioner
    # Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    accessModes:
      - ReadWriteOnce

    # -- Drone server data Persistent Volume annotations
    annotations: {}

    # -- If you'd like to bring your own PVC for persisting Drone state, pass the name of the
    # created + ready PVC here. If set, this Chart will not create the default PVC.
    # Requires server.persistentVolume.enabled: true
    existingClaim: ""

    # -- Drone server data Persistent Volume mount root path
    mountPath: /data

    # -- Drone server data Persistent Volume size
    size: 8Gi

    # -- Drone server data Persistent Volume Storage Class
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    #   set, choosing the default provisioner.  (gp2 on AWS, standard on
    #   GKE, AWS & OpenStack)
    storageClass: ""

    # -- Drone server data Persistent Volume Binding Mode
    # If defined, volumeMode: <volumeMode>
    # If empty (the default) or set to null, no volumeBindingMode spec is
    # set, choosing the default mode.
    volumeMode: ""

    # -- Subdirectory of Drone server data Persistent Volume to mount
    # Useful if the volume's root directory is not empty
    subPath: ""

  # -- If persistentVolume.enabled is set to false, Drone will mount an emptyDir instead of
  # a PVC for any state that it needs to persist.
  emptyDir:
    # -- Total space to request for the emptyDir. An empty value here means no limit.
    sizeLimit: ""

kubeRunner:
  # -- Specifies whether a kube runner should be created
  enabled: true

  # -- (int) Numbers of runner replicas
  # For small or experimental deployments of the Kubernetes runner, 1 replica will suffice.
  # For production cases, 2-3 are recommended. This does not grant additional parallelism,
  # but does ensure that upgrades, config changes, and disruptions are handled more gracefully.
  replicaCount: 1

  image:
    # -- The kube runner docker image repository to use
    repository: drone/drone-runner-kube
    # -- The kube runner image tag to use
    tag: 1.0.0-rc.2
    # -- The kube runner image pull policy
    pullPolicy: IfNotPresent

  serviceAccount:
    # -- Specifies whether a kube runner service account should be created
    create: true
    # -- Annotations to add to the kube runner service account
    annotations: {}
    # -- The name of the kube runner service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- Annotations for the kube runner pod
  podAnnotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "80"

  # -- When the runner receives a SIGTERM/SIGINT (config update, upgrade, etc), it will wait until
  # all jobs that particular pod has spawned complete. It is for this reason that you'll want
  # to make sure that this value is longer than your longest job.
  terminationGracePeriodSeconds: 3600

  # -- Security context for all kube runner pod
  podSecurityContext: {}
    # fsGroup: 2000

  # -- Security context for the kube runner container
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    # -- Specifies what type of kube runner Service should be created
    type: ClusterIP
    # -- Default kube runner Service port
    port: 3000
    # -- Additional kube runner service annotations
    annotations: {}

  ingress:
    # -- Specifies if you want to create an ingress access to kube runner
    enabled: false
    # -- Specifies if you want to use different ingress controller for kube runner
    className: ""
    # -- Additional kube runner ingress annotations
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            # -- Kube runner ingress path type
            pathType: ImplementationSpecific
    # -- Kube runner ingress tls configuration for https access
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- Set the kube runner resources requests and limits
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- If you'd like to force the Drone runner to run on a specific node or set of nodes,
  # set a selector here.
  nodeSelector: {}

  # -- Set the tolerations for the kube runner pod.
  tolerations: []

  # -- Set the affinity for the kube runner pod.
  affinity: {}

  # -- If you'd like to make additional files or volumes available to the runner, declare additional
  # Volumes here per the Pod spec's "volumes" section.
  # Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  extraVolumes: []
  # -- If you have declared extra volumes, mount them here, per the Pod Container's
  # "volumeMounts" section.
  extraVolumeMounts: []

  # -- If you'd like to provide your own Kubernetes Secret object instead of passing your values
  # in un-encrypted, pass in the name of a created + populated Secret in the same Namespace
  # as the Kubernetes runner. All secrets within this configmap will be mounted as environment
  # variables, with each key/value mapping to a corresponding environment variable on the
  # Kubernetes runner.
  extraSecretNamesForEnvFrom: []
  # - my-drone-secrets

  # -- Each namespace listed below will be configured such that the runner can run build Pods in
  # it. This comes in the form of a Role and a RoleBinding. If you change env.DRONE_NAMESPACE_DEFAULT
  # or the other DRONE_NAMESPACE_* variables, make sure to update this list to include all
  # namespaces.
  rbac:
    buildNamespaces:
      - default

  ## The keys within the "envs" map are mounted as environment variables on the Kubernetes runner pod.
  ## See the full reference of Kubernetes runner environment variables here:
  ## Ref: https://docs.drone.io/runner/kubernetes/installation/
  env:
    # -- The protocol to use for communication with Drone server.
    # Ref: https://docs.drone.io/runner/kubernetes/configuration/reference/drone-rpc-proto/
    DRONE_RPC_PROTO: http

    # -- Determines the default Kubernetes namespace for Drone builds to run in.
    # Ref: https://docs.drone.io/runner/kubernetes/configuration/reference/drone-namespace-default/
    DRONE_NAMESPACE_DEFAULT: default
