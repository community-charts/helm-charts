{{- if .Values.auth.enabled -}}
{{- $databaseUri := "" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "mlflow.fullname" . }}-auth-config-secret
  labels:
    app: {{ template "mlflow.name" . }}
    chart: {{ template "mlflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
stringData:
  {{ default "basic_auth.ini" (.Values.auth.configFile | trimPrefix "/") }}: |-
    [mlflow]
    default_permission = {{ .Values.auth.defaultPermission }}
  {{- if .Values.auth.postgres.enabled }}
    {{- $dbConnectionDriver := "" }}
    {{- if .Values.auth.postgres.driver }}
      {{- $dbConnectionDriver = printf "+%s" .Values.auth.postgres.driver }}
    {{- end }}
    {{- $pgUser := "" }}
    {{- $pgPassword := "" }}
    {{- if .Values.auth.postgres.existingSecret.name }}
      {{- $existingAuthSecret := lookup "v1" "Secret" .Release.Namespace .Values.auth.postgres.existingSecret.name }}
      {{- if not $existingAuthSecret }}
        {{- fail (printf "Existing auth secret '%s' not found in namespace '%s'" .Values.auth.postgres.existingSecret.name .Release.Namespace) }}
      {{- end }}
      {{- $usernameKey := required "auth.postgres.existingSecret.usernameKey must be specified" .Values.auth.postgres.existingSecret.usernameKey }}
      {{- $passwordKey := required "auth.postgres.existingSecret.passwordKey must be specified" .Values.auth.postgres.existingSecret.passwordKey }}
      {{- $pgUser = required (printf "Username key '%s' not found in secret '%s'" $usernameKey .Values.auth.postgres.existingSecret.name) (get $existingAuthSecret.data $usernameKey | b64dec) }}
      {{- $pgPassword = required (printf "Password key '%s' not found in secret '%s'" $passwordKey .Values.auth.postgres.existingSecret.name) (get $existingAuthSecret.data $passwordKey | b64dec) }}
    {{- else }}
      {{- $pgUser = required "auth.postgres.user must be specified" .Values.auth.postgres.user }}
      {{- $pgPassword = required "auth.postgres.password must be specified" .Values.auth.postgres.password }}
    {{- end }}
    {{- $pgHost := required "auth.postgres.host must be specified" .Values.auth.postgres.host }}
    {{- $pgPort := required "auth.postgres.port must be specified" .Values.auth.postgres.port | toString }}
    {{- $pgDatabase := required "auth.postgres.database must be specified" .Values.auth.postgres.database }}
    {{- $databaseUri = printf "postgresql%s://%s:%s@%s:%s/%s" $dbConnectionDriver $pgUser $pgPassword $pgHost $pgPort $pgDatabase }}
  {{- else }}
    {{- $sqliteFile := .Values.auth.sqliteFile }}
    {{- if .Values.auth.sqliteFullPath }}
      {{- $path := printf "%s/" .Values.auth.sqliteFullPath | trimSuffix "/" }}
      {{- $databaseUri = printf "sqlite:///%s%s" $path $sqliteFile }}
    {{- else }}
      {{- $databaseUri = printf "sqlite:///%s" $sqliteFile }}
    {{- end }}
  {{- end }}
  {{- $adminUsername := "" }}
  {{- $adminPassword := "" }}
  {{- if .Values.auth.existingAdminSecret.name }}
    {{- $existingAdminSecret := lookup "v1" "Secret" .Release.Namespace .Values.auth.existingAdminSecret.name }}
    {{- if not $existingAdminSecret }}
      {{- fail (printf "Existing admin credentials secret '%s' not found in namespace '%s'" .Values.auth.existingAdminSecret.name .Release.Namespace) }}
    {{- end }}
    {{- $adminCredUsernameKey := required "auth.existingAdminSecret.usernameKey must be specified" .Values.auth.existingAdminSecret.usernameKey }}
    {{- $adminCredPasswordKey := required "auth.existingAdminSecret.passwordKey must be specified" .Values.auth.existingAdminSecret.passwordKey }}
    {{- $adminUsername = required (printf "Username key '%s' not found in secret '%s'" $adminCredUsernameKey .Values.auth.existingAdminSecret.name) (get $existingAdminSecret.data $adminCredUsernameKey | b64dec) }}
    {{- $adminPassword = required (printf "Password key '%s' not found in secret '%s'" $adminCredPasswordKey .Values.auth.existingAdminSecret.name) (get $existingAdminSecret.data $adminCredPasswordKey | b64dec) }}
  {{- else }}
    {{- $adminUsername = required "auth.adminUsername must be specified" .Values.auth.adminUsername }}
    {{- $adminPassword = required "auth.adminPassword must be specified" .Values.auth.adminPassword }}
  {{- end }}
    database_uri = {{ $databaseUri }}
    admin_username = {{ $adminUsername }}
    admin_password = {{ $adminPassword }}
    authorization_function = {{ required "auth.authorizationFunction can not be empty!" .Values.auth.authorizationFunction }}
{{- else if .Values.ldapAuth.enabled -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "mlflow.fullname" . }}-auth-config-secret
  labels:
    app: {{ template "mlflow.name" . }}
    chart: {{ template "mlflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
stringData:
  ldap_basic_auth.ini: |-
    [mlflow]
    default_permission = READ
    database_uri = sqlite:///ldap_basic_auth.db
    admin_username = fakeuser
    admin_password = fakepassword
    authorization_function = mlflowstack.auth.ldap:authenticate_request_basic_auth
{{- end }}
