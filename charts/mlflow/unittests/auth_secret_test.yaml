suite: test authentication secret

templates:
  - auth_secret.yaml

tests:
  - it: should be empty when auth is not enabled
    set:
      auth.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should require postgres user when postgres enabled
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        postgres:
          enabled: true
          host: postgresdb
          database: auth
          password: authpassword
    asserts:
      - failedTemplate:
          errorMessage: "auth.postgres.user must be specified"

  - it: should require postgres passsword when postgres enabled
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        postgres:
          enabled: true
          host: postgresdb
          database: auth
          user: authuser
    asserts:
      - failedTemplate:
          errorMessage: "auth.postgres.password must be specified"

  - it: should require postgres host when postgres enabled
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        postgres:
          enabled: true
          database: auth
          user: authuser
          password: authpassword
    asserts:
      - failedTemplate:
          errorMessage: "auth.postgres.host must be specified"

  - it: should require postgres database when postgres enabled
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        postgres:
          enabled: true
          host: postgresdb
          user: authuser
          password: authpassword
    asserts:
      - failedTemplate:
          errorMessage: "auth.postgres.database must be specified"

  - it: should require admin username
    set:
      auth:
        enabled: true
        adminPassword: "thisisnotasecret"
    asserts:
      - failedTemplate:
          errorMessage: "auth.adminUsername must be specified"

  - it: should require admin password
    set:
      auth:
        enabled: true
        adminUsername: "admin"
    asserts:
      - failedTemplate:
          errorMessage: "auth.adminPassword must be specified"

  - it: should require authorization function
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        authorizationFunction: ""
    asserts:
      - failedTemplate:
          errorMessage: "auth.authorizationFunction can not be empty!"

  - it: should be empty when ldap auth is not enabled
    set:
      ldapAuth:
        enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should use sqlite on default when auth enabled
    set:
      auth.enabled: true
      auth.adminUsername: "admin"
      auth.adminPassword: "thisisnotasecret"
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }

  - it: should use different path for sqlite
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        sqliteFullPath: "/volumes/auth"
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }

  - it: should use slash only path for sqlite
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        sqliteFullPath: "/"
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }

  - it: should use postgres when auth enabled and postgres backend enabled
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        postgres:
          enabled: true
          host: postgresdb
          port: 1234
          database: auth
          user: authuser
          password: authpassword
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }

  - it: should work with postgres driver
    set:
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "thisisnotasecret"
        postgres:
          enabled: true
          host: postgresdb
          database: auth
          user: authuser
          password: authpassword
          driver: psycopg2
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }

  - it: should set auth with plain credentials
    set:
      # Test values file for MLFlow WITHOUT auth.existingDatabaseSecret (old insecure way)
      auth:
        enabled: true
        adminUsername: "admin"
        adminPassword: "S3cr3+"
        postgres:
          enabled: true
          host: "postgresql--auth-instance1.abcdef1234.eu-central-1.rds.amazonaws.com"
          port: 5432
          database: "auth"
          # Hardcoded credentials (insecure)
          user: "mlflowauth"
          password: "A4m1nPa33w0rd!"

      # Also configure backend store for comparison
      backendStore:
        postgres:
          enabled: true
          host: "postgresql-instance1.cg034hpkmmjt.eu-central-1.rds.amazonaws.com"
          port: 5432
          database: "mlflow"
          # Using existing secret for backend (secure)
          user: ""
          password: ""
        existingDatabaseSecret:
          name: "postgres-database-secret"
          usernameKey: "username"
          passwordKey: "password"

    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.5.0
      appVersion: 3.2.0
    asserts:
      - matchSnapshot: { }

  - it: should use ldap configurations when ldap auth enabled
    set:
      ldapAuth:
        enabled: true
        uri: "ldap://lldap:3890/dc=mlflow,dc=test"
        lookupBind: "uid=%s,ou=people,dc=mlflow,dc=test"
        groupAttribute: "dn"
        searchBaseDistinguishedName: "ou=groups,dc=mlflow,dc=test"
        searchFilter: "(&(objectclass=groupOfUniqueNames)(uniquemember=%s))"
        adminGroupDistinguishedName: "cn=test-admin,ou=groups,dc=mlflow,dc=test"
        userGroupDistinguishedName: "cn=test-user,ou=groups,dc=mlflow,dc=test"
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }
